{{- if .Values.config.s3.integration }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1beta1
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "kanister.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
    create: '1'
  resultResources:
    - when: [coupled, updated]
      do: apply
      stringTemplate: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{ template "kanister.name" . }}-creds
          namespace: {{ .Release.Namespace }}
        type: secrets.kanister.io/aws
        stringData:
          # AWS_ACCESS_KEY_ID: {% .socketConfig.accessKey | quote %}
          # AWS_SECRET_ACCESS_KEY: {% .socketConfig.secretKey | quote %}
          role: {% .socketConfig.role | quote %}
    - when: [coupled, updated]
      do: apply
      stringTemplate: |
        apiVersion: cr.kanister.io/v1alpha1
        kind: Profile
        metadata:
          name: {{ template "kanister.name" . }}-s3
          namespace: {{ .Release.Namespace }}
        location:
          type: s3Compliant
          bucket: {% .plugConfig.bucket | quote %}
          endpoint: {% (printf "http%s://%s" ((eq .socketConfig.tls "1") | ternary "s" "") .socketConfig.endpoint) | quote %}
          prefix: {{ .Values.config.s3.prefix | quote }}
          region: {% .socketConfig.region | quote %}
        credential:
          type: secret
          secret:
            apiVersion: v1
            kind: Secret
            name: {{ template "kanister.name" . }}-creds
            namespace: {{ .Release.Namespace }}
          # keyPair:
          #   idField: AWS_ACCESS_KEY_ID
          #   secretField: AWS_SECRET_ACCESS_KEY
          #   secret:
          #     apiVersion: v1
          #     kind: Secret
          #     name: {{ template "kanister.name" . }}-creds
          #     namespace: {{ .Release.Namespace }}
        skipSSLVerify: true
    - do: apply
      template:
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: s3-coupled-or-updated
        spec:
          background: true
          mutateExistingOnPolicyUpdate: true
          rules:
            - name: serviceaccount
              match:
                resources:
                  kinds:
                    - /*/ServiceAccount
                  names:
                    - kanister-operator-release
              mutate:
                targets:
                  - apiVersion: v1
                    kind: ServiceAccount
                    name: kanister-operator-release
                patchStrategicMerge:
                  metadata:
                    annotations:
                      eks.amazonaws.com/role-arn: '{% .socketResult.roleArn %}'
{{- end }}
