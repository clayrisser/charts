apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ template "harbor.fullname" . }}-harbor
  labels:
    app: {{ template "harbor.name" . }}-harbor
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  helmVersion: v3
  chart:
    repository: https://helm.goharbor.io
    name: harbor
    version: 1.4.0
  values:
    expose:
      type: {{ .Values.ingress.harbor.enabled | ternary "ingress" .Values.service.harbor.type }}
      tls:
        enabled: {{ .Values.ingress.harbor.tls }}
        certSource: secret
        auto:
          commonName: {{ template "harbor.fullname" . }}-harbor
        secret:
          secretName: {{ .Values.ingress.harbor.certificate | quote }}
          # notarySecretName: ""
      ingress:
        hosts:
          core: {{ .Values.ingress.harbor.hostname | quote }}
          # notary: notary.harbor.domain
        controller: default
        annotations:
          ingress.kubernetes.io/ssl-redirect: "true"
          ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
      clusterIP:
        name: harbor
        ports:
          httpPort: 80
          httpsPort: 443
          # notaryPort: 4443
      nodePort:
        name: harbor
        ports:
          http:
            port: 80
            nodePort: {{ .Values.service.harbor.nodePorts.http }}
          https:
            port: 443
            nodePort: 30003
          # notary:
          #   port: 4443
          #   nodePort: 30004
      loadBalancer:
        name: harbor
        IP: ""
        ports:
          httpPort: {{ .Values.service.harbor.lbPorts.http }}
          httpsPort: 443
          # notaryPort: 4443
        annotations: {}
        sourceRanges: []
    internalTLS:
      enabled: false
      certSource: "auto"
      trustCa: ""
      core:
        secretName: ""
        crt: ""
        key: ""
      jobservice:
        secretName: ""
        crt: ""
        key: ""
      registry:
        secretName: ""
        crt: ""
        key: ""
      portal:
        secretName: ""
        crt: ""
        key: ""
      chartmuseum:
        secretName: ""
        crt: ""
        key: ""
      clair:
        secretName: ""
        crt: ""
        key: ""
      trivy:
        secretName: ""
        crt: ""
        key: ""
    persistence:
      enabled: true
      resourcePolicy: "keep"
      persistentVolumeClaim:
        registry:
          existingClaim: {{ .Values.persistence.existingClaim.registry }}
          storageClass: {{ .Values.persistence.storageClass }}
          subPath: ""
          accessMode: ReadWriteOnce
          size: {{ .Values.persistence.size.registry }}
        chartmuseum:
          existingClaim: {{ .Values.persistence.existingClaim.chartmuseum }}
          storageClass: {{ .Values.persistence.storageClass }}
          subPath: ""
          accessMode: ReadWriteOnce
          size: {{ .Values.persistence.size.chartmuseum }}
        jobservice:
          existingClaim: {{ .Values.persistence.existingClaim.jobservice }}
          storageClass: {{ .Values.persistence.storageClass }}
          subPath: ""
          accessMode: ReadWriteOnce
          size: {{ .Values.persistence.size.jobservice }}
        redis:
          existingClaim: {{ .Values.persistence.existingClaim.redis }}
          storageClass: {{ .Values.persistence.storageClass }}
          subPath: ""
          accessMode: ReadWriteOnce
          size: {{ .Values.persistence.size.redis }}
        trivy:
          existingClaim: {{ .Values.persistence.existingClaim.trivy }}
          storageClass: {{ .Values.persistence.storageClass }}
          subPath: ""
          accessMode: ReadWriteOnce
          size: {{ .Values.persistence.size.trivy }}
      imageChartStorage:
        disableredirect: false
        type: filesystem
        filesystem:
          rootdirectory: /storage
        azure:
          accountname: accountname
          accountkey: base64encodedaccountkey
          container: containername
        gcs:
          bucket: bucketname
          encodedkey: base64-encoded-json-key-file
        s3:
          region: us-west-1
          bucket: bucketname
          #accesskey: awsaccesskey
          #secretkey: awssecretkey
          #regionendpoint: http://myobjects.local
          #encrypt: false
          #keyid: mykeyid
          #secure: true
          #skipverify: false
          #v4auth: true
          #chunksize: "5242880"
          #rootdirectory: /s3/object/name/prefix
          #storageclass: STANDARD
          #multipartcopychunksize: "33554432"
          #multipartcopymaxconcurrency: 100
          #multipartcopythresholdsize: "33554432"
        swift:
          authurl: https://storage.myprovider.com/v3/auth
          username: username
          password: password
          container: containername
        oss:
          accesskeyid: accesskeyid
          accesskeysecret: accesskeysecret
          region: regionname
          bucket: bucketname
    imagePullPolicy: {{ .Values.config.imagePullPolicy }}
    imagePullSecrets:
    updateStrategy:
      type: RollingUpdate
    logLevel: info
    harborAdminPassword: {{ .Values.config.password | quote }}
    caSecretName: ""
    secretKey: {{ .Values.config.secret | quote }}
    proxy:
      httpProxy:
      httpsProxy:
      noProxy: 127.0.0.1,localhost,.local,.internal
      components:
        - core
        - jobservice
        - clair
        - trivy
    nginx:
      image:
        repository: goharbor/nginx-photon
        tag: dev
      serviceAccountName: ""
      replicas: 1
      # resources:
      #   requests:
      #     memory: 256Mi
      #     cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
    portal:
      image:
        repository: goharbor/harbor-portal
        tag: dev
      serviceAccountName: ""
      replicas: 1
      # resources:
      #   requests:
      #     memory: 256Mi
      #     cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
    core:
      image:
        repository: goharbor/harbor-core
        tag: dev
      serviceAccountName: ""
      replicas: 1
      startupProbe:
        initialDelaySeconds: 10
      # resources:
      #   requests:
      #     memory: 256Mi
      #       cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
      secret: ""
      secretName: ""
      xsrfKey: ""
    jobservice:
      image:
        repository: goharbor/harbor-jobservice
        tag: dev
      replicas: 1
      serviceAccountName: ""
      maxJobWorkers: 10
      jobLogger: file
      # resources:
      #   requests:
      #     memory: 256Mi
      #     cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
      secret: ""
    registry:
      serviceAccountName: ""
      registry:
        image:
          repository: goharbor/registry-photon
          tag: dev
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      controller:
        image:
          repository: goharbor/harbor-registryctl
          tag: dev
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      replicas: 1
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations:
        backup.velero.io/backup-volumes: registry-data
      secret: ""
      relativeurls: false
      credentials:
        username: "harbor_registry_user"
        password: "harbor_registry_password"
        htpasswd: "harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m"
      middleware:
        enabled: false
        type: cloudFront
        cloudFront:
          baseurl: example.cloudfront.net
          keypairid: KEYPAIRID
          duration: 3000s
          ipfilteredby: none
          privateKeySecret: "my-secret"
    chartmuseum:
      enabled: true
      serviceAccountName: ""
      absoluteUrl: false
      image:
        repository: goharbor/chartmuseum-photon
        tag: dev
      replicas: 1
      # resources:
      #   requests:
      #     memory: 256Mi
      #     cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations:
        backup.velero.io/backup-volumes: chartmuseum-data
    clair:
      enabled: false
      serviceAccountName: ""
      clair:
        image:
          repository: goharbor/clair-photon
          tag: dev
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      adapter:
        image:
          repository: goharbor/clair-adapter-photon
          tag: dev
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      replicas: 1
      updatersInterval: 12
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
    trivy:
      enabled: false
      image:
        repository: goharbor/trivy-adapter-photon
        tag: dev
      serviceAccountName: ""
      replicas: 1
      debugMode: false
      vulnType: "os,library"
      severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
      ignoreUnfixed: false
      insecure: false
      gitHubToken: ""
      skipUpdate: false
      resources:
        requests:
          cpu: 200m
          memory: 512Mi
        limits:
          cpu: 1
          memory: 1Gi
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
    notary:
      enabled: false
      server:
        serviceAccountName: ""
        image:
          repository: goharbor/notary-server-photon
          tag: dev
        replicas: 1
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      signer:
        serviceAccountName: ""
        image:
          repository: goharbor/notary-signer-photon
          tag: dev
        replicas: 1
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
      nodeSelector: {}
      tolerations: []
      affinity: {}
      podAnnotations: {}
      secretName: ""
    database:
      type: external
      external:
        host: {{ .Values.config.postgres.host | quote }}
        port: {{ .Values.config.postgres.port | quote }}
        username: {{ .Values.config.postgres.username | quote }}
        password: {{ .Values.config.postgres.password | quote }}
        coreDatabase: {{ .Values.config.postgres.database | quote }}
        clairDatabase: "clair"
        notaryServerDatabase: "notary_server"
        notarySignerDatabase: "notary_signer"
        sslmode: "disable"
      maxIdleConns: 50
      maxOpenConns: 1000
      podAnnotations: {}
    redis:
      type: internal
      internal:
        serviceAccountName: ""
        image:
          repository: goharbor/redis-photon
          tag: dev
        # resources:
        #   requests:
        #     memory: 256Mi
        #     cpu: 100m
        nodeSelector: {}
        tolerations: []
        affinity: {}
      podAnnotations: {}
