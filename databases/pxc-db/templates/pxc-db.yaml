apiVersion: pxc.percona.com/v1-6-0
kind: PerconaXtraDBCluster
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "pxc-db.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"pxc.percona.com/v1-6-0","kind":"PerconaXtraDBCluster"}
  finalizers:
    - delete-pxc-pods-in-order
    - delete-proxysql-pvc
    - delete-pxc-pvc
spec:
  crVersion: 1.6.0
  secretsName: {{ include "pxc-db.fullname" . }}
  {{- if .Values.config.tls.enabled }}
  sslSecretName: {{ .Values.config.tls.certificate | default (printf "%s-tls" (include "pxc-db.fullname" .)) }}
  sslInternalSecretName: {{ .Values.config.tls.certificate | default (printf "%s-tls" (include "pxc-db.fullname" .)) }}
  {{- end }}
  allowUnsafeConfigurations: true
  pause: {{ .Values.config.pxc.pause }}
  updateStrategy: {{ .Values.config.updateStrategy }}
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com/versions
    apply: recommended
    schedule: {{ .Values.config.pxc.upgrade.schedule }}
  pxc:
    size: {{ .Values.config.pxc.size }}
    image: '{{ .Values.images.pxc.repository }}:{{ .Values.images.pxc.tag }}'
    readinessDelaySec: 15
    livenessDelaySec: 300
    forceUnsafeBootstrap: false
{{- if .Values.config.pxc.mysqlConfig }}
    configuration: |
{{ tpl .Values.config.pxc.mysqlConfig $ | nindent 6 }}
{{- end }}
    # imagePullSecrets: []
    # priorityClassName:
    {{- if .Values.persistence.velero.enabled }}
    annotations:
      backup.velero.io/backup-volumes: datadir
    {{- end }}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if .Values.config.pxc.resources.enabled }}
      requests:
{{ toYaml .Values.config.pxc.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.pxc.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      {{- if not .Values.persistence.enabled }}
      emptyDir: {}
      {{- else }}
      persistentVolumeClaim:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes: [{{ .Values.persistence.accessMode | quote }}]
        resources:
          requests:
            storage: {{ .Values.persistence.size.pxc | quote }}
      {{- end }}
  haproxy:
    enabled: {{ .Values.config.haproxy.enabled }}
    size: {{ .Values.config.haproxy.size }}
    image: '{{ .Values.images.haproxy.repository }}:{{ .Values.images.haproxy.tag }}'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    # imagePullSecrets: []
    # priorityClassName:
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if .Values.config.haproxy.resources.enabled }}
      requests:
{{ toYaml .Values.config.haproxy.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.haproxy.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      # {{- if not .Values.persistence.enabled }}
      emptyDir: {}
      # {{- else }}
      # persistentVolumeClaim:
      #   {{- if .Values.persistence.storageClass }}
      #   {{- if (eq "-" .Values.persistence.storageClass) }}
      #   storageClassName: ''
      #   {{- else }}
      #   storageClassName: {{ .Values.persistence.storageClass }}
      #   {{- end }}
      #   {{- end }}
      #   accessModes: [{{ .Values.persistence.accessMode | quote }}]
      #   resources:
      #     requests:
      #       storage: {{ .Values.persistence.size.haproxy | quote }}
      # {{- end }}
  proxysql:
    enabled: {{ .Values.config.proxysql.enabled }}
    size: {{ .Values.config.proxysql.size }}
    image: '{{ .Values.images.proxysql.repository }}:{{ .Values.images.proxysql.tag }}'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if .Values.config.proxysql.resources.enabled }}
      requests:
{{ toYaml .Values.config.proxysql.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.proxysql.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      {{- if not .Values.persistence.enabled }}
      emptyDir: {}
      {{- else }}
      persistentVolumeClaim:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes: [{{ .Values.persistence.accessMode | quote }}]
        resources:
          requests:
            storage: {{ .Values.persistence.size.proxysql | quote }}
      {{- end }}
  pmm:
    enabled: {{ .Values.config.pmm.enabled }}
    image: '{{ .Values.images.pmm.repository }}:{{ .Values.images.pmm.tag }}'
    serverHost: {{ .Values.config.pmm.hostname | quote }}
    serverUser: {{ .Values.config.pmm.username | quote }}
  backup:
    enabled: {{ .Values.config.backup.enabled }}
    image: '{{ .Values.images.backup.repository }}:{{ .Values.images.backup.tag }}'
    # imagePullSecrets:
    storages:
      s3:
        type: s3
        s3:
          bucket: {{ .Values.config.backup.s3.bucket }}
          credentialsSecret: {{ template "pxc-db.fullname" . }}-backup
          region: {{ .Values.config.backup.s3.region }}
          endpointUrl: {{ .Values.config.backup.s3.endpoint }}
    schedule:
      - name: backup
        schedule: {{ .Values.config.backup.enabled | ternary .Values.config.backup.schedule "0 0 31 2 *" }}
        keep: {{ .Values.config.backup.keep }}
        storageName: s3
