{{- if .Values.config.allowIntegration }}
apiVersion: integration.siliconhills.dev/v1alpha1
kind: IntegrationSocket
metadata:
  name: {{ template "postgres.fullname" . }}
  labels:
    app: {{ template "postgres.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  appendName: {{ .Release.Name }}
  replications:
    - version: v1
      kind: Secret
      name: {{ template "postgres.fullname" . }}-{{ .Values.config.username }}-secret
    - version: v1
      kind: ConfigMap
      name: {{ template "postgres.fullname" . }}-connection
  hooks:
    - job:
        backoffLimit: 1
        template:
          spec:
            restartPolicy: Never
            containers:
              - name: create-database
                image: postgres:12.5-alpine
                command:
                  - sh
                  - -c
                  - |
                    export STDOUT="/tmp/createdb.out"
                    echo "*:*:*:*:$PASSWORD" > .pgpass
                    chmod 600 .pgpass
                    createdb -h $HOSTNAME -U $USERNAME -p $PORT -w $DATABASE 2>&1 | tee $STDOUT
                    if cat $STDOUT | grep -qE "database .+ already exists"; then
                      echo "STATUS_MESSAGE: database $DATABASE already exists"
                    elif cat $STDOUT | grep -qE "[^ \t\n]"; then
                      echo "STATUS_MESSAGE: $STDOUT"
                      rm $STDOUT
                      exit 1
                    else
                      echo "STATUS_MESSAGE: created database $DATABASE"
                    fi
                    rm $STDOUT
                env:
                  - name: PGPASSFILE
                    value: .pgpass
                  - name: HOSTNAME
                    value: {{ template "postgres.fullname" . }}-postgres.{{ .Release.Namespace }}.svc.cluster.local
                  - name: USERNAME
                    value: {{ .Values.config.username }}
                  - name: PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: {{ template "postgres.fullname" . }}-{{ .Values.config.username }}-secret-{{ .Release.Name }}
                        key: password
                  - name: DATABASE
                    valueFrom:
                      configMapKeyRef:
                        name: {{ template "postgres.fullname" . }}-socket
                        key: database
                  - name: PORT
                    value: '5432'
      messageRegex: '/(?<=STATUS_MESSAGE:\s).+/g'
      name: create-or-update
      timeout: 60000
{{- end }}
