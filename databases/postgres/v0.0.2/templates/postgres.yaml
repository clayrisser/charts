apiVersion: crunchydata.com/v1
kind: Pgcluster
metadata:
  name: {{ template "postgres.fullname" . }}
  labels:
    app: {{ template "postgres.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    autofail: 'true'
    crunchy-pgbadger: 'false'
    crunchy-pgha-scope: {{ template "postgres.fullname" . }}
    crunchy-postgres-exporter: 'false'
    deployment-name: {{ template "postgres.fullname" . }}
    name: {{ template "postgres.fullname" . }}
    pg-cluster: {{ template "postgres.fullname" . }}
    pg-pod-anti-affinity: ''
    pgo-backrest: 'true'
    pgo-version: {{ .Chart.AppVersion | quote }}
    pgouser: admin
  annotations:
    current-primary: {{ template "postgres.fullname" . }}
    primary-deployment: {{ template "postgres.fullname" . }}
spec:
  ArchiveStorage:
    accessmode: {{ .Values.persistence.accessMode | quote }}
    matchLabels: ''
    name: ''
    size: {{ .Values.persistence.size.archive | quote }}
    storageclass: {{ .Values.persistence.storageClass | quote }}
    storagetype: dynamic
    supplementalgroups: ''
  BackrestStorage:
    accessmode: {{ .Values.persistence.accessMode | quote }}
    matchLabels: ''
    name: ''
    size: {{ .Values.persistence.size.backrest | quote }}
    storageclass: {{ .Values.persistence.storageClass | quote }}
    storagetype: dynamic
    supplementalgroups: ''
  PrimaryStorage:
    accessmode: {{ .Values.persistence.accessMode | quote }}
    matchLabels: ''
    name: {{ template "postgres.fullname" . }}
    size: {{ .Values.persistence.size.primary | quote }}
    storageclass: {{ .Values.persistence.storageClass | quote }}
    storagetype: dynamic
    supplementalgroups: ''
  ReplicaStorage:
    accessmode: {{ .Values.persistence.accessMode | quote }}
    matchLabels: ''
    name: ''
    size: {{ .Values.persistence.size.replica | quote }}
    storageclass: {{ .Values.persistence.storageClass | quote }}
    storagetype: dynamic
    supplementalgroups: ''
  WALStorage:
    accessmode: {{ .Values.persistence.accessMode | quote }}
    matchLabels: ''
    name: ''
    size: {{ .Values.persistence.size.wal | quote }}
    storageclass: {{ .Values.persistence.storageClass | quote }}
    storagetype: dynamic
    supplementalgroups: ''
  annotations:
    global: {}
    pgBouncer: {}
    postgres:
      {{- if .Values.persistence.velero.enabled }}
      backup.velero.io/backup-volumes: pgdata
      {{- end }}
    backrest:
      {{- if .Values.persistence.velero.enabled }}
      backup.velero.io/backup-volumes: backrestrepo
      {{- end }}
  backrestConfig: null
  backrestLimits: {}
  backrestRepoPath: ''
  backrestResources:
    memory: 48Mi
  backrestS3Bucket: ''
  backrestS3Endpoint: ''
  backrestS3Region: ''
  backrestS3URIStyle: ''
  backrestS3VerifyTLS: 'true'
  ccpimage: {{ .Values.images.postgres.repository | quote }}
  ccpimageprefix: {{ .Values.images.postgres.registry | quote }}
  ccpimagetag: {{ .Values.images.postgres.tag | quote }}
  clustername: {{ template "postgres.fullname" . }}
  # collectSecretName: hippo-exporter-secret
  customconfig: ''
  database: postgres
  exporter: {{ .Values.config.metrics }}
  exporterLimits: {}
  exporterResources:
    memory: '0'
  exporterport: '9187'
  name: {{ template "postgres.fullname" . }}
  namespace: {{ .Release.Namespace }}
  pgBouncer:
    limits: {}
    replicas: 0
    resources:
      memory: 24Mi
  pgDataSource:
    restoreFrom: ''
    restoreOpts: ''
  pgbadgerport: '10000'
  pgoimageprefix: registry.developers.crunchydata.com/crunchydata
  podAntiAffinity:
    default: preferred
    pgBackRest: preferred
    pgBouncer: preferred
  policies: ''
  port: '5432'
  primarysecretname: {{ template "postgres.fullname" . }}-primaryuser-secret
  replicas: '0'
  rootsecretname: {{ template "postgres.fullname" . }}-{{ .Values.config.username }}-secret
{{- if (and .Values.config.resources.enabled (not (eq .Values.config.resources.enabled "false"))) }}
  resources:
{{ toYaml .Values.config.resources.requests | indent 4 }}
  limits:
{{ toYaml .Values.config.resources.limits | indent 4 }}
{{- else }}
  resources: {}
  limits: {}
{{- end }}
  shutdown: {{ .Values.config.shutdown }}
  standby: false
  tablespaceMounts: {}
  tls:
    caSecret: ''
    replicationTLSSecret: ''
    tlsSecret: ''
  tlsOnly: false
  user: user
  userlabels:
    crunchy-postgres-exporter: 'false'
    pg-pod-anti-affinity: ''
    pgo-version: {{ .Chart.AppVersion | quote }}
  usersecretname: {{ template "postgres.fullname" . }}-user-secret
  tolerations: []
