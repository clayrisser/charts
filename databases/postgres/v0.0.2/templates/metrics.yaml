{{- if .Values.config.metrics }}
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "postgres.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  forceUpgrade: false
  helmVersion: v3
  chart:
    git: https://github.com/CrunchyData/postgres-operator.git
    ref: v{{ .Chart.AppVersion }}
    path: installers/metrics/helm
  git:
    timeout: 60s
  values:
    replicaCount: 1
    image:
      repository: registry.developers.crunchydata.com/crunchydata
      pullPolicy: Always
      tag: centos7-{{ .Chart.AppVersion }}
    alertmanager_install: {{ .Values.config.alertmanagerInstall | quote }}
    alertmanager_log_level: info
    alertmanager_port: 9093
    alertmanager_service_name: {{ template "postgres.fullname" . }}-crunchy-alertmanager
    alertmanager_service_type: ClusterIP
    db_port: 5432
    grafana_admin_password: {{ .Values.config.grafanaAdminPassword | quote }}
    grafana_admin_username: {{ .Values.config.grafanaAdminUsername | quote }}
    grafana_install: {{ .Values.config.grafanaInstall | quote }}
    grafana_port: 3000
    grafana_service_name: {{ template "postgres.fullname" . }}-crunchy-grafana
    grafana_service_type: ClusterIP
    metrics_namespace: {{ .Release.Namespace }}
    pgbadgerport: 10000
    prometheus_install: {{ .Values.config.prometheusInstall | quote }}
    prometheus_port: 9090
    prometheus_service_name: {{ template "postgres.fullname" . }}-crunchy-prometheus
    prometheus_service_type: ClusterIP
    persistence:
      assets:
        accessMode: {{ .Values.persistence.accessMode | quote }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size.assets | quote }}
      system:
        accessMode: {{ .Values.persistence.accessMode | quote }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size.system | quote }}
    service:
      type: ClusterIP
      port: {{ (eq .Values.service.metrics.type "LoadBalancer") | ternary .Values.service.metrics.lbPorts.http  ((and (eq .Values.service.metrics.type "NodePort") (not (empty .Values.service.metrics.nodePorts.http))) | ternary .Values.service.metrics.nodePorts.http "80") }}
    podSecurityContext:
      runAsUser: 991
      runAsGroup: 991
      fsGroup: 991
    securityContext: {}
    serviceAccount:
      create: true
      annotations: {}
      name: ''

    {{- if .Values.persistence.velero.enabled }}
    podAnnotations:
      backup.velero.io/backup-volumes: data
    {{- else }}
    podAnnotations: {}
    {{- end }}
{{- if .Values.config.resources.enabled }}
    resources:
{{ toYaml .Values.config.resources | indent 6 }}
{{- else }}
    resources: {}
{{- end }}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}


{{- end }}
