apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ template "openldap.name" . }}
  labels:
    app: {{ template "openldap.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  forceUpgrade: false
  helmVersion: v3
  wait: false
  git:
    timeout: 120s
  chart:
    git: https://github.com/jp-gouin/helm-openldap.git
    ref: v2.1.5
    path: .
  values:
    replicaCount: {{ .Values.config.openldap.replicas }}
    updateStrategy:
      type: {{ .Values.config.updateStrategy | quote }}
    image:
      repository: {{ .Values.images.openldap.repository | quote }}
      tag: {{ .Values.images.openldap.tag | quote }}
      pullPolicy: {{ .Values.config.imagePullPolicy }}
    logLevel: {{ .Values.config.debug | ternary "debug" "info" }}
    existingSecret: {{ template "openldap.name" . }}
    customTLS:
      enabled: {{ .Values.service.openldap.tls.enabled }}
      secret: {{ template "openldap.openldap-certificate" . }}
      CA:
        enabled: true
        secret: {{ template "openldap.openldap-certificate" . }}
    extraLabels: {}
    {{- if .Values.persistence.velero.enabled }}
    podAnnotations:
      backup.velero.io/backup-volumes: data
    {{- else }}
    podAnnotations: {}
    {{- end }}
    service:
      annotations: {}
      {{- if (eq .Values.service.openldap.type "LoadBalancer") }}
      ldapPort: {{ .Values.service.openldap.lbPorts.openldap }}
      sslLdapPort: {{ .Values.service.openldap.lbPorts.sslLdap }}
      {{- else }}
      ldapPort: 389
      sslLdapPort: 636
      {{- end }}
      {{- if (eq .Values.service.openldap.type "NodePort") }}
      ldapPortNodePort: {{ .Values.service.openldap.nodePorts.ldap }}
      sslLdapPortNodePort: {{ .Values.service.openldap.nodePorts.ldaps }}
      {{- end }}
      externalIPs: []
      # loadBalancerIP:
      # loadBalancerSourceRanges: []
      type: {{ .Values.service.openldap.type | quote }}
    env:
      CONTAINER_LOG_LEVEL: '4'
      KEEP_EXISTING_CONFIG: {{ .Values.config.debug | ternary "true" "false" | quote }}
      LDAP_BACKEND: 'mdb'
      LDAP_DOMAIN: {{ .Values.config.openldap.domain | quote }}
      LDAP_HASH_PASSWORD: {{ .Values.config.openldap.hashPassword | quote }}
      LDAP_LOG_LEVEL: {{ .Values.config.debug | ternary "-1" "256" | quote }}
      LDAP_ORGANISATION: {{ .Values.config.openldap.organization | quote }}
      LDAP_READONLY_USER: 'false'
      LDAP_READONLY_USER_PASSWORD: 'readonly'
      LDAP_READONLY_USER_USERNAME: 'readonly'
      LDAP_REMOVE_CONFIG_AFTER_SETUP: 'true'
      LDAP_RFC2307BIS_SCHEMA: 'false'
      LDAP_SSL_HELPER_PREFIX: 'ldap'
      LDAP_TLS: {{ .Values.service.openldap.tls.enabled | quote }}
      LDAP_TLS_CA_CRT_FILENAME: 'ca.crt'
      LDAP_TLS_CIPHER_SUITE: 'NORMAL'
      LDAP_TLS_CRT_FILENAME: 'tls.crt'
      LDAP_TLS_DH_PARAM_FILENAME: 'dhparam.pem'
      LDAP_TLS_ENFORCE: {{ .Values.service.openldap.tls.enforce | quote }}
      LDAP_TLS_KEY_FILENAME: 'tls.key'
      LDAP_TLS_PROTOCOL_MIN: '3.0'
      LDAP_TLS_REQCERT: 'never'
      LDAP_TLS_VERIFY_CLIENT: 'never'
    customLdifFiles:
      01-organization.ldif: |
        version: 1
        dn: {{ template "openldap.openldap-dc" . }}
        objectClass: top
        objectClass: dcObject
        objectClass: organization
        o: {{ .Values.config.organization }}
        dc: {{ index (regexSplit "\\." .Values.config.openldap.domain -1) 0 }}
      {{- if (not (empty .Values.config.openldap.organizationalUnits)) }}
      02-organizational-units.ldif: |
        {{- range (splitList "," .Values.config.openldap.organizationalUnits) }}
        dn: ou={{ . }},{{ template "openldap.openldap-dc" $ }}
        objectclass: organizationalUnit
        objectclass: top
        ou: {{ . }}
        {{- printf "\n" }}
        {{- end }}
      {{- end }}
    replication:
      enabled: true
      clusterName: 'cluster.local'
      retry: 60
      timeout: 1
      interval: 00:00:00:10
      starttls: 'critical'
      tls_reqcert: 'never'
    persistence:
      enabled: {{ .Values.persistence.enabled }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClass: ''
      {{- else }}
      storageClass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
      accessModes:
        - {{ .Values.persistence.accessMode | quote }}
      size: {{ .Values.persistence.size.openldap | quote }}
    {{- if (and .Values.config.openldap.resources.enabled (not (eq .Values.config.openldap.resources.enabled "false"))) }}
    resources:
      requests:
{{ toYaml .Values.config.openldap.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.openldap.resources.limits | indent 8 }}
    {{- else }}
    resources: {}
    {{- end }}
    nodeSelector: {}
    tolerations: []
    test:
      enabled: false
      image:
        repository: dduportal/bats
        tag: 0.4.0
    ltb-passwd:
      enabled : false
      ingress:
        enabled: false
        annotations: {}
        path: /
        hosts:
          - 'ssl-ldap2.example'
      ldap:
        server: ldap://openldap-stack-ha
        searchBase: {{ template "openldap.openldap-dc" . }}
        bindDN: cn=admin,{{ template "openldap.openldap-dc" . }}
        bindPWKey: LDAP_ADMIN_PASSWORD
    phpldapadmin:
      enabled: {{ .Values.config.phpldapadmin.enabled }}
      ingress:
        enabled: {{ .Values.ingress.phpldapadmin.enabled }}
        annotations:
          {{- if (eq .Values.config.clusterType "aks") }}
          kubernetes.io/ingress.class: addon-http-application-routing
          {{- else }}
          kubernetes.io/ingress.class: nginx
          {{- end }}
          {{- if .Values.ingress.phpldapadmin.tls }}
          {{- if (empty .Values.ingress.phpldapadmin.certificate) }}
          cert-manager.io/cluster-issuer: {{ .Values.ingress.phpldapadmin.issuer.name }}
          kubernetes.io/tls-acme: 'true'
          {{- end }}
          nginx.ingress.kubernetes.io/ssl-redirect: 'true'
          {{- end }}
        path: /
        hosts:
          - {{ .Values.ingress.phpldapadmin.hostname }}
        {{- if .Values.ingress.phpldapadmin.tls }}
        tls:
          - secretName: {{ template "openldap.phpldapadmin-certificate" . }}
            hosts:
              - {{ .Values.ingress.phpldapadmin.hostname }}
        {{- end }}
      env:
        PHPLDAPADMIN_HTTPS: 'false'
        PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT: allow
        PHPLDAPADMIN_TRUST_PROXY_SSL: 'true'
        PHPLDAPADMIN_LDAP_HOSTS: |
          #PYTHON2BASH:[
            {'{{ .Release.Name }}': [
              {'server': [
                {'host': 'ldap{{ .Values.service.openldap.tls.enabled | ternary "s" "" }}://{{ .Release.Name }}-{{ template "openldap.name" . }}-openldap-stack-ha'},
              ]},
              {'login': [{'bind_id': 'cn=admin,{{ template "openldap.openldap-dc" . }}'}]}
            ]}
          ]
