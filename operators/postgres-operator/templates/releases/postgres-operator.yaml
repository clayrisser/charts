apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "pxc-operator.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  helmVersion: v3
  chart:
    git: https://github.com/zalando/postgres-operator.git
    ref: v1.5.0
    path: charts/postgres-operator
  values:
    image:
      registry: registry.opensource.zalan.do
      repository: acid/postgres-operator
      tag: v1.5.0
      pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
    podAnnotations: {}
    podLabels: {}
    configTarget: "ConfigMap"
    configGeneral:
      enable_crd_validation: "true"
      enable_lazy_spilo_upgrade: "false"
      enable_shm_volume: "true"
      etcd_host: ""
      docker_image: registry.opensource.zalan.do/acid/spilo-12:1.6-p3
      min_instances: "-1"
      max_instances: "-1"
      repair_period: 5m
      resync_period: 30m
      workers: "4"
    configUsers:
      replication_username: standby
      super_username: postgres
    configKubernetes:
      cluster_domain: cluster.local
      cluster_labels: application:spilo
      cluster_name_label: cluster-name
      enable_init_containers: "true"
      enable_pod_antiaffinity: {{ .Values.config.enableAntiaffinity | quote }}
      enable_pod_disruption_budget: "true"
      enable_sidecars: "true"
      inherited_labels: application,environment,io.cattle.field/appId
      pdb_name_format: "postgres-{cluster}-pdb"
      pod_antiaffinity_topology_key: "kubernetes.io/hostname"
      pod_management_policy: "ordered_ready"
      pod_role_label: spilo-role
      pod_terminate_grace_period: 5m
      secret_name_template: "{username}.{cluster}.credentials.{tprkind}.{tprgroup}"
      spilo_privileged: "false"
      watched_namespace: "*"  # listen to all namespaces
    configPostgresPodResources:
      default_cpu_limit: "1"
      default_cpu_request: 100m
      default_memory_limit: 500Mi
      default_memory_request: 100Mi
      min_cpu_limit: 250m
      min_memory_limit: 250Mi
    configTimeouts:
      pod_deletion_wait_timeout: 10m
      pod_label_wait_timeout: 10m
      ready_wait_interval: 3s
      ready_wait_timeout: 30s
      resource_check_interval: 3s
      resource_check_timeout: 10m
    configLoadBalancer:
      db_hosted_zone: db.example.com
      enable_master_load_balancer: "false"
      enable_replica_load_balancer: "false"
      master_dns_name_format: '{cluster}.{team}.{hostedzone}'
      replica_dns_name_format: '{cluster}-repl.{team}.{hostedzone}'
    configDebug:
      debug_logging: "true"
      enable_database_access: "true"
    configLoggingRestApi:
      api_port: "8080"
      cluster_history_entries: "1000"
      ring_log_lines: "100"
    configAwsOrGcp:
      aws_region: eu-central-1
    configLogicalBackup:
      logical_backup_docker_image: "registry.opensource.zalan.do/acid/logical-backup:master-58"
      logical_backup_s3_access_key_id: ""
      logical_backup_s3_bucket: "my-bucket-url"
      logical_backup_s3_region: ""
      logical_backup_s3_endpoint: ""
      logical_backup_s3_secret_access_key: ""
      logical_backup_s3_sse: "AES256"
      logical_backup_schedule: "30 00 * * *"
    configTeamsApi:
      enable_teams_api: "false"
    configConnectionPooler:
      connection_pooler_schema: "pooler"
      connection_pooler_user: "pooler"
      connection_pooler_image: "registry.opensource.zalan.do/acid/pgbouncer:master-7"
      connection_pooler_max_db_connections: "60"
      connection_pooler_mode: "transaction"
      connection_pooler_number_of_instances: "2"
      connection_pooler_default_cpu_request: 500m
      connection_pooler_default_memory_request: 100Mi
      connection_pooler_default_cpu_limit: "1"
      connection_pooler_default_memory_limit: 100Mi
    rbac:
      create: true
    crd:
      create: true
    serviceAccount:
      create: true
      name:
    podServiceAccount:
      name: "postgres-pod"
    priorityClassName: ""
{{- if .Values.config.postgresOperator.resources.enabled }}
    resources:
      requests:
{{ toYaml .Values.config.postgresOperator.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.postgresOperator.resources.limits | indent 8 }}
{{- end }}
    affinity: {}
    tolerations: []
    nodeSelector: {}
    controllerID:
      create: false
      name:
