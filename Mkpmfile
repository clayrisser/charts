include $(MKPM)/mkpm
include $(MKPM)/gnu

HELM := helm
GIT := git
SED := sed
GREP := grep
DOCKER := docker

CI_PAGES_URL ?= http://localhost:8000
HELM_REPO_URL := $(CI_PAGES_URL)
HELM_REPO_INDEX := $(HELM_REPO_URL)/index.yaml

CHART := .
CHARTS := $(shell $(GIT) ls-files | $(GREP) -Ev "^depricated/" \
	| $(GREP) -oE '.+/Chart\.yaml' | $(SED) 's/\/Chart\.yaml$$//g' | sort -u)

.EXPORT_ALL_VARIABLES:

.PHONY: charts
charts: $(CHARTS) ## prepare all helm charts

.PHONY: lint
lint: ##
ifeq ($(CHART),.)
	-@for c in $(CHARTS); do \
		$(ECHO) && \
		$(ECHO) "LINTING: $$c" && \
		$(MAKE) -s prepack CHART="$$c" && \
		$(MAKE) -s lint CHART="$$c"; \
	done
else
	@$(HELM) lint $(CHART)
endif

.PHONY: prepack
prepack: ##
ifeq ($(CHART),.)
	-@for c in $(CHARTS); do \
		$(ECHO) && \
		$(ECHO) "PREPACKING: $$c" && \
		$(MAKE) -s prepack CHART="$$c"; \
	done
else
	@$(MAKE) -C $(CHART) -s prepack 2>$(NULL) || $(TRUE)
endif

.PHONY: debug
debug: ##
ifeq ($(CHART),.)
	@for c in $(CHARTS); do \
			echo && \
			echo "DEBUGGING: $$c" && \
			$(MAKE) -s debug CHART="$$c"; \
		done
else
	@$(HELM) install --debug --dry-run --generate-name $(CHART)
endif

.PHONY: package
package: #$(CHARTS) ## package helm charts
	@$(MKDIR) -p ./public
	@$(MV) ./public/*.tgz ./ 2>/dev/null || true
	@$(ECHO) "User-Agent: *\nDisallow: /" > ./public/robots.txt
	@$(HELM) package $(CHARTS) --destination .
	@$(HELM) repo index --url $(HELM_REPO_URL) .
	@$(HELM) repo-html -i index.yaml -o index.html -t index.tpl
	@$(MV) *.tgz ./public
	@$(MV) index.yaml ./public
	@$(MV) index.html ./public
	@$(CP) -r ./public-overlay/* ./public

.PHONY: prev-artifacts
prev-artifacts: ## load previous artifacts
	@JOB_ID=$$(curl -s -L -H "PRIVATE-TOKEN: $(GITLAB_TOKEN)" \
			$(CI_SERVER_URL)/api/v4/projects/$(CI_PROJECT_ID)/jobs?scope=success | \
			jq -r '[.[] | select(.name=="$(CI_JOB_NAME)")][0].id') && \
		if ! ([ "$$JOB_ID" = "" ] || [ "$$JOB_ID" = "null" ]); then \
			curl -L -H "PRIVATE-TOKEN: $(GITLAB_TOKEN)" -o artifacts.zip \
				$(CI_SERVER_URL)/$(CI_PROJECT_NAMESPACE)/$(CI_PROJECT_NAME)/-/jobs/$$JOB_ID/artifacts/download && \
			unzip artifacts.zip; \
		fi

.PHONY: docker-build
docker-build: ##
	@$(DOCKER) build -f ./Dockerfile -t codejamninja/make-helm:latest .

.PHONY: docker-push
docker-push: ##
	@$(DOCKER) push codejamninja/make-helm:latest

.PHONY: clean
clean: ##
	@$(GIT) clean -fXd

.PHONY: $(CHARTS)
$(CHARTS):
	@$(MAKE) -C $@ -s prepack
	@$(HELM) lint $@
#	-@$(MAKE) -s debug CHART="$@"
