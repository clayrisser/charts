{{- if (not (and (eq .Values.config.terminationPolicy "Pause") .Values.config.pause)) }}
apiVersion: kubedb.com/v1alpha1
kind: MongoDB
metadata:
  name: {{ template "mongodb.fullname" . }}-mongodb
  labels:
    app: {{ template "mongodb.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  version: {{ .Values.config.version | quote }}
  databaseSecret:
    secretName: {{ template "mongodb.sharedname" . }}-mongodb-auth
  {{- if .Values.config.prometheus }}
  monitor:
    agent: prometheus.io/builtin
  {{- end }}
  {{- if .Values.config.ssl.enabled }}
  sslMode: requireSSL
  {{- else }}
  sslMode: disabled
  {{- end }}
  {{- if (and .Values.config.ssl.enabled .Values.config.replicaSet.enabled) }}
  clusterAuthMode: x509
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storageType: Durable
  {{- else }}
  storageType: Ephemeral
  {{- end }}
  {{- if .Values.config.shardTopology.enabled }}
  shardTopology:
    configServer:
      prefix: configServer
      replicas: {{ .Values.config.shardTopology.configServer.replicas }}
      configSource:
        configMap:
          name: {{ template "mongodb.fullname" . }}-mongodb
      podTemplate:
        {{- if .Values.persistence.velero.enabled }}
        metadata:
          annotations:
            backup.velero.io/backup-volumes: data
        {{- end }}
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: group
                        operator: In
                        values:
                          - dedicated
              resources:
{{ toYaml .Values.config.shardTopology.configServer.resources | indent 12 }}
      {{- if .Values.persistence.enabled }}
      storage:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          - {{ .Values.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- end }}
    mongos:
      prefix: mongos
      replicas: {{ .Values.config.shardTopology.mongos.replicas }}
      strategy:
        type: {{ (eq .Values.config.updateStrategy "Recreate") | ternary "RollingUpdate" .Values.config.updateStrategy }}
      configSource:
        configMap:
          name: {{ template "mongodb.fullname" . }}-mongodb
      podTemplate:
        {{- if .Values.persistence.velero.enabled }}
        metadata:
          annotations:
            backup.velero.io/backup-volumes: data
        {{- end }}
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: group
                        operator: In
                        values:
                          - dedicated
          resources:
{{ toYaml .Values.config.shardTopology.mongos.resources | indent 12 }}
    shard:
      prefix: shard
      replicas: {{ .Values.config.shardTopology.shard.replicas }}
      shards: {{ .Values.config.shardTopology.shard.shards }}
      configSource:
        configMap:
          name: {{ template "mongodb.fullname" . }}-mongodb
      podTemplate:
        {{- if .Values.persistence.velero.enabled }}
        metadata:
          annotations:
            backup.velero.io/backup-volumes: data
        {{- end }}
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: group
                        operator: In
                        values:
                          - dedicated
          resources:
{{ toYaml .Values.config.shardTopology.shard.resources | indent 12 }}
      {{- if .Values.persistence.enabled }}
      storage:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes:
          - {{ .Values.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- end }}
  {{- else }}
  configSource:
    configMap:
      name: {{ template "mongodb.fullname" . }}-mongodb
  {{- if .Values.config.replicaSet.enabled }}
  replicas: {{ .Values.config.replicaSet.replicas }}
  replicaSet:
    name: rs0
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storage:
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
    storageClassName: ''
    {{- else }}
    storageClassName: {{ .Values.persistence.storageClass }}
    {{- end }}
    {{- end }}
    accessModes:
      - {{ .Values.persistence.accessMode }}
    resources:
      requests:
        storage: {{ .Values.persistence.size }}
  {{- end }}
  podTemplate:
    {{- if .Values.persistence.velero.enabled }}
    metadata:
      annotations:
        backup.velero.io/backup-volumes: data
    {{- end }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: group
                    operator: In
                    values:
                      - dedicated
      resources:
{{ toYaml .Values.config.resources | indent 8 }}
  {{- end }}
  init:
    scriptSource:
      configMap:
        name: {{ template "mongodb.fullname" . }}-mongodb-init
  serviceTemplate:
    metadata:
      annotations:
        passMe: ToService
    spec:
      type: {{ .Values.service.mongodb.type }}
      {{- if (or (eq .Values.service.mongodb.type "LoadBalancer") (eq .Values.service.mongodb.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.mongodb.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: mongodb
          port: 27017
          targetPort: mongodb
          {{- if (and (eq .Values.service.mongodb.type "NodePort") (not (empty .Values.service.mongodb.nodePorts.mongodb))) }}
          nodePort: {{ .Values.service.mongodb.nodePorts.mongodb }}
          {{- end }}
  updateStrategy:
    type: {{ (eq .Values.config.updateStrategy "Recreate") | ternary "RollingUpdate" .Values.config.updateStrategy }}
  terminationPolicy: {{ .Values.config.terminationPolicy }}
{{- if .Values.persistence.stash.enabled }}
---
apiVersion: appcatalog.appscode.com/v1alpha1
kind: AppBinding
metadata:
  name: {{ template "mongodb.fullname" . }}-mongodb
  labels:
    app: {{ template "mongodb.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: kubedb.com/mongodb
  version: {{ .Values.config.version | quote }}
  clientConfig:
    service:
      name: {{ template "mongodb.fullname" . }}-mongodb
      port: 27017
      scheme: mongodb
  parameters:
    kind: MongoDB
    apiVersion: kubedb.com/v1alpha1
    {{- if .Values.config.replicaSet.enabled }}
    replicaSets:
      host-0: rs0/{{ template "mongodb.mongodb-server" . }}
    {{- end }}
{{- if (and .Values.persistence.stash.enabled (not (empty .Values.persistence.stash.restore.snapshot))) }}
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  name: {{ template "mongodb.fullname" . }}-mongodb
  labels:
    app: {{ template "mongodb.name" . }}-mongodb
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    kubedb.com/kind: MongoDB
spec:
  driver: Restic
  task:
    name: mongodb-restore-{{ index .Values.config.versionMap .Values.config.version }}
  repository:
    name: {{ template "mongodb.fullname" . }}-mongodb
  target:
    ref:
      apiVersion: appcatalog.appscode.com/v1alpha1
      kind: AppBinding
      name: {{ template "mongodb.fullname" . }}-mongodb
  rules:
    - snapshots:
      - {{ .Values.persistence.stash.restore.snapshot | quote }}
{{- end }}
{{- end }}
{{- end }}
