apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "openldap.fullname" . }}-openldap
  labels:
    app: {{ template "openldap.name" . }}-openldap
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "openldap.name" . }}-openldap
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "openldap.name" . }}-openldap
        release: {{ .Release.Name }}
      {{- if .Values.persistence.velero.enabled }}
      annotations:
        backup.velero.io/backup-volumes: data
      {{- end }}
    spec:
      hostname: {{ template "openldap.openldap-hostname" . }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: lifecycle
                    operator: In
                    values:
                      - dedicated
      containers:
        - name: {{ template "openldap.fullname" . }}-openldap
          image: {{ .Values.images.openldap.repository }}:{{ .Values.images.openldap.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          command:
            - sh
            - -c
            - |
              sh /config/ppolicy.sh &
          {{- if (eq .Values.config.schema "postfix-book") }}
              rm /container/service/slapd/assets/config/bootstrap/schema/mmc/mail.schema
          {{- end }}
          {{- if .Values.config.debug }}
              exec /container/tool/run --copy-service --loglevel debug
          {{- else }}
              exec /container/tool/run --copy-service
          {{- end }}
          ports:
            - name: ldap
              containerPort: 389
            {{- if .Values.config.openldap.tls }}
            - name: ldaps
              containerPort: 636
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /_data
            - name: data
              mountPath: /var/lib/ldap
              subPath: data
            - name: data
              mountPath: /etc/ldap/slapd.d
              subPath: config
            {{- if (eq .Values.config.schema "postfix-book") }}
            - name: config
              subPath: postfix-book.schema
              mountPath: /container/service/slapd/assets/config/bootstrap/schema/postfix-book.schema
            {{- end }}
            - name: config
              mountPath: /container/service/slapd/assets/config/bootstrap/ldif/custom/01-organization.ldif
              subPath: 01-organization.ldif
            {{- if .Values.config.hashPassword }}
            - name: config
              mountPath: /config/ppolicy.ldif
              subPath: ppolicy.ldif
            - name: config
              mountPath: /config/ppolicy.sh
              subPath: ppolicy.sh
            {{- end }}
          env:
            {{- if .Values.config.debug }}
            - name: LDAP_LOG_LEVEL
              value: '-1'
            {{- end }}
            - name: LDAP_REMOVE_CONFIG_AFTER_SETUP
              value: 'true'
            - name: LDAP_BACKEND
              value: mdb
            - name: LDAP_TLS
              value: {{ .Values.config.openldap.tls | quote }}
            - name: LDAP_TLS_ENFORCE
              value: {{ .Values.config.openldap.tls | quote }}
            - name: LDAP_ORGANISATION
              valueFrom:
                configMapKeyRef:
                  name: {{ template "openldap.fullname" . }}
                  key: organization
            - name: LDAP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ template "openldap.fullname" . }}
                  key: domain
            - name: LDAP_CONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "openldap.fullname" . }}
                  key: config_password
            - name: LDAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "openldap.fullname" . }}
                  key: admin_password
          livenessProbe:
            tcpSocket:
              port: ldap
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            tcpSocket:
              port: ldap
{{ toYaml .Values.probes.readiness | indent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ template "openldap.fullname" . }}-openldap
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "openldap.fullname" . ) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
{{- if (and .Values.persistence.stash.enabled (not (empty .Values.persistence.stash.restore.snapshot.data))) }}
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  name: {{ template "openldap.fullname" . }}-openldap
  labels:
    app: {{ template "openldap.name" . }}-openldap
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  driver: Restic
  repository:
    name: {{ template "openldap.fullname" . }}-data
  rules:
    - snapshots:
        - {{ .Values.persistence.stash.restore.snapshot.data | quote }}
  target:
    paths:
      /_data
    ref:
      apiVersion: apps/v1
      kind: Deployment
      name: {{ template "openldap.fullname" . }}-openldap
    volumeMounts:
      - name: data
        mountPath: /_data
{{- end }}
