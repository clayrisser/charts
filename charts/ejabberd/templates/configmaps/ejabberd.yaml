apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "ejabberd.fullname" . }}-ejabberd
  labels:
    app: {{ template "ejabberd.name" . }}-ejabberd
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  ejabberd.yml: |
    hosts:
      - localhost
    loglevel: {{ .Values.config.debug | ternary 5 4 }}
    log_rotate_size: 10485760
    log_rotate_date: ''
    log_rotate_count: 1
    log_rate_limit: 100
    {{- if (and .Values.ingress.ejabberd.enabled .Values.ingress.ejabberd.tls) }}
    certfiles:
      - /home/ejabberd/conf/certs/cert.pem
      - /home/ejabberd/conf/certs/tls.key
    ca_file: /home/ejabberd/conf/certs/cert.pem
    {{- else }}
    certfiles:
      - /home/ejabberd/conf/server.pem
    ca_file: /home/ejabberd/conf/cacert.pem
    {{- end }}
    listen:
      - port: 5222
        ip: '::'
        module: ejabberd_c2s
        max_stanza_size: 262144
        shaper: c2s_shaper
        access: c2s
        starttls_required: true
      - port: 5269
        ip: '::'
        module: ejabberd_s2s_in
        max_stanza_size: 524288
      - port: 5443
        ip: '::'
        module: ejabberd_http
        tls: true
        request_handlers:
          /admin: ejabberd_web_admin
          /api: mod_http_api
          /bosh: mod_bosh
          /captcha: ejabberd_captcha
          /oauth: ejabberd_oauth
          /upload: mod_http_upload
          /ws: ejabberd_http_ws
      - port: 5280
        ip: '::'
        module: ejabberd_http
        request_handlers:
          /admin: ejabberd_web_admin
          /api: mod_http_api
          /bosh: mod_bosh
          /captcha: ejabberd_captcha
          /oauth: ejabberd_oauth
          /upload: mod_http_upload
          /ws: ejabberd_http_ws
      - port: 1883
        ip: '::'
        module: mod_mqtt
        backlog: 1000
    s2s_use_starttls: optional
    acl:
      local:
        user_regexp: ''
      loopback:
        ip:
          - 127.0.0.0/8
          - ::1/128
          - ::FFFF:127.0.0.1/128
      admin:
        user:
          - 'admin@localhost'
    access_rules:
      local:
        allow: local
      c2s:
        deny: blocked
        allow: all
      announce:
        allow: admin
      configure:
        allow: admin
      muc_create:
        allow: local
      pubsub_createnode:
        allow: local
      trusted_network:
        allow: loopback
    api_permissions:
      'console commands':
        from:
          - ejabberd_ctl
        who: all
        what: '*'
      'admin access':
        who:
          access:
            allow:
              acl: loopback
              acl: admin
          oauth:
            scope: 'ejabberd:admin'
            access:
              allow:
                acl: loopback
                acl: admin
        what:
          - '*'
          - '!stop'
          - '!start'
      'public commands':
        who:
          ip: 127.0.0.1/8
        what:
          - status
          - connected_users_number
    shaper:
      normal: 1000
      fast: 50000
    shaper_rules:
      max_user_sessions: 10
      max_user_offline_messages:
        5000: admin
        100: all
      c2s_shaper:
        none: admin
        normal: all
      s2s_shaper: fast
    max_fsm_queue: 10000
    acme:
       contact: 'mailto:example-admin@example.com'
       ca_url: 'https://acme-v01.api.letsencrypt.org'
    modules:
      mod_adhoc: {}
      mod_admin_extra: {}
      mod_announce:
        access: announce
      mod_avatar: {}
      mod_blocking: {}
      mod_bosh: {}
      mod_caps: {}
      mod_carboncopy: {}
      mod_client_state: {}
      mod_configure: {}
      mod_disco: {}
      mod_fail2ban: {}
      mod_http_api: {}
      mod_http_upload:
        put_url: https://@HOST@:5443/upload
      mod_last: {}
      mod_mam:
        ## Mnesia is limited to 2GB, better to use an SQL backend
        ## For small servers SQLite is a good fit and is very easy
        ## to configure. Uncomment this when you have SQL configured:
        ## db_type: sql
        assume_mam_usage: true
        default: never
      mod_mqtt: {}
      mod_muc:
        access:
          - allow
        access_admin:
          - allow: admin
        access_create: muc_create
        access_persistent: muc_create
        access_mam:
          - allow
        default_room_options:
          allow_subscription: true
          mam: false
      mod_muc_admin: {}
      mod_offline:
        access_max_user_messages: max_user_offline_messages
      mod_ping: {}
      mod_privacy: {}
      mod_private: {}
      mod_proxy65:
        access: local
        max_connections: 5
      mod_pubsub:
        access_createnode: pubsub_createnode
        plugins:
          - flat
          - pep
        force_node_config:
          storage:bookmarks:
            access_model: whitelist
      mod_push: {}
      mod_push_keepalive: {}
      mod_register:
        ip_access: trusted_network
      mod_roster:
        versioning: true
      mod_sip: {}
      mod_s2s_dialback: {}
      mod_shared_roster: {}
      mod_stream_mgmt:
        resend_on_timeout: if_offline
      mod_vcard: {}
      mod_vcard_xupdate: {}
      mod_version:
        show_os: false

  setup.sh: |
    if cat /home/ejabberd/conf/certs/tls.crt | tr '\n' '~' | grep -q -E "END CERTIFICATE.+BEGIN CERTIFICATE"; then
      cat /home/ejabberd/conf/certs/tls.crt | tr '\n' '~' | \
        sed 's/-\+END CERTIFICATE-\+~-\+BEGIN CERTIFICATE-\+/~/g' | \
        awk '{split($0,array,"~~~")} END{print array[1]}' | tr '~' '\n' > /home/ejabberd/conf/certs/cert.pem
      echo "-----END CERTIFICATE-----" >> /home/ejabberd/conf/certs/cert.pem
      echo >> /home/ejabberd/conf/certs/cert.pem
      echo "-----BEGIN CERTIFICATE-----" > /home/ejabberd/conf/certs/fullchain.pem
      cat /home/ejabberd/conf/certs/tls.crt | tr '\n' '~' | \
        sed 's/-\+END CERTIFICATE-\+~-\+BEGIN CERTIFICATE-\+/~/g' | \
        awk '{split($0,array,"~~~")} END{print array[2]}' | tr '~' '\n' >> /home/ejabberd/conf/certs/fullchain.pem
    else
      cp /home/ejabberd/conf/certs/tls.crt /home/ejabberd/conf/certs/cert.pem
    fi
