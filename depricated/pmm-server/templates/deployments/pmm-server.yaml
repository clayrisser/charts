apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "pmm-server.fullname" . }}-pmm-server
  labels:
    app: {{ template "pmm-server.name" . }}-pmm-server
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "pmm-server.name" . }}-pmm-server
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "pmm-server.name" . }}-pmm-server
        release: {{ .Release.Name }}
      {{- if .Values.persistence.velero.enabled }}
      annotations:
        backup.velero.io/backup-volumes: data
      {{- end }}
    spec:
      securityContext:
        supplementalGroups: [1000]
        fsGroup: 1000
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.persistence.enabled | ternary "91" "89" }}
              preference:
                matchExpressions:
                  - key: application/state
                    operator: In
                    values:
                      - {{ .Values.persistence.enabled | ternary "stateful" "stateless" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 90
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ template "pmm-server.name" . }}-pmm-server
      containers:
        - name: {{ template "pmm-server.fullname" . }}-pmm-server
          image: {{ .Values.images.pmmServer.repository }}:{{ .Values.images.pmmServer.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          command: ['bash']
          args:
            - '-c'
            - '/scripts/start.sh'
{{- if .Values.config.pmmServer.resources.enabled }}
          resources:
{{ toYaml .Values.config.pmmServer.resources | indent 12 }}
{{- end }}
          ports:
            - name: container
              containerPort: 80
          volumeMounts:
            - name: data
              mountPath: /_data
            - name: data
              mountPath: /pmmdata
              subPath: data
            - name: config
              mountPath: /scripts/start.sh
              readOnly: true
              subPath: start.sh
            # - name: prometheus
            #   mountPath: /srv/prometheus/prometheus.base.yml
            #   subPath: prometheus.base.yml
          env:
            - name: DISABLE_UPDATES
              value: "true"
            - name: METRICS_RESOLUTION
              valueFrom:
                configMapKeyRef:
                  name: {{ template "pmm-server.fullname" . }}
                  key: metric_resolution
            - name: METRICS_RETENTION
              valueFrom:
                configMapKeyRef:
                  name: {{ template "pmm-server.fullname" . }}
                  key: metric_retention
            - name: QUERIES_RETENTION
              valueFrom:
                configMapKeyRef:
                  name: {{ template "pmm-server.fullname" . }}
                  key: queries_retention
            - name: METRICS_MEMORY
              value: "600000"
            {{ if .Values.config.pmmServer.password }}
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "pmm-server.fullname" . }}
                  key: password
            {{ end }}
          livenessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim.pmmServer | default (printf "%s-pmm-server" (include "pmm-server.fullname" . )) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: config
          configMap:
            name: {{ template "pmm-server.fullname" . }}-pmm-server
            defaultMode: 0744
        - name: prometheus
          configMap:
            name: {{ template "pmm-server.fullname" . }}-prometheus
