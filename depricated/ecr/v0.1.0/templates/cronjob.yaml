apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "ecr.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          serviceAccountName: '{{ .Release.Namespace }}'
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          containers:
            - name: {{ template "ecr.fullname" . }}
              image: odaniait/aws-kubectl:latest
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -c
                - |-
                  export SECRET_NAME=${AWS_DEFAULT_REGION}-ecr-registry
                  export TTOKEN=`aws ecr get-login --region ${AWS_DEFAULT_REGION} --registry-ids ${AWS_ACCOUNT} | cut -d' ' -f6`
                  echo token $TTOKEN
                  echo "ENV variables setup done."
                  kubectl delete secret --ignore-not-found $SECRET_NAME
                  kubectl create secret docker-registry $SECRET_NAME \
                  --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com \
                  --docker-username=AWS \
                  --docker-password="${TTOKEN}" \
                  --docker-email="${EMAIL}"
                  kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
                  echo "All done."
              env:
                - name: EMAIL
                  value: {{ .Values.config.email | quote }}
                - name: AWS_ACCOUNT
                  value: {{ .Values.config.aws.account | quote }}
                - name: AWS_DEFAULT_REGION
                  value: {{ .Values.config.aws.region | quote }}
                - name: AWS_ACCESS_KEY_ID
                  value: {{ .Values.config.aws.accessKey | quote }}
                - name: AWS_SECRET_ACCESS_KEY
                  value: {{ .Values.config.aws.secretKey | quote }}
              resources: {}
              securityContext:
                capabilities: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
  schedule: '* * * * *'
  successfulJobsHistoryLimit: 3
  suspend: false
