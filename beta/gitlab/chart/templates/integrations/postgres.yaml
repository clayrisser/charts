{{- if .Values.config.postgres.integration }}
{{- $name := (split "." .Values.config.postgres.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.postgres.integration))._0 }}
{{- $patchGitlab := true }}
apiVersion: integration.rock8s.com/v1alpha2
kind: Plug
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: {{ template "gitlab.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: postgres
    namespace: {{ $namespace }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    database: {{ .Values.config.postgres.database | quote }}
    createdb: 'true'
    cleanup: 'false'
    replicate: 'false'
  resources:
    - when: [coupled, updated]
      do: apply
      resource: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres
            namespace: {{ .Release.Namespace }}
          stringData:
            POSTGRES_PASSWORD: '{% .socketConfig.password %}'
{{- if $patchGitlab }}
    - when: [coupled, updated]
      do: recreate
      resource: |
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: postgres-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          validationFailureAction: enforce
          background: true
          rules:
            - name: strategic
              match:
                resources:
                  kinds:
                    - v1/*/ConfigMap
                  names:
                    - gitlab
              mutate:
                patchStrategicMerge:
                  spec:
                    chart:
                      values:
                        global:
                          psql:
                            host: '{% .socketConfig.hostname %}'
                            port: '{% .socketConfig.port %}'
                            username: '{% .socketConfig.username %}'
                            database: '{% .plugConfig.database %}'
                            password:
                              useSecret: true
                              secret: postgres
                              key: POSTGRES_PASSWORD
{{- end }}
{{- end }}
