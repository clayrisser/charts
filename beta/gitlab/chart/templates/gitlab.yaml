apiVersion: apps.gitlab.com/v1beta1
kind: GitLab
metadata:
  name: {{ template "gitlab.name" . }}
  labels:
    app: {{ template "gitlab.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  chart:
    version: '5.5.0'
    values:
      global:
        edition: ce
        application:
          create: true
          allowClusterRoles: true
        hosts:
          domain: {{ template "gitlab.gitlab-hostname" . }}
          https: {{ .Values.ingress.gitlab.tls }}
          gitlab:
            name: {{ template "gitlab.gitlab-hostname" . }}
            https: {{ .Values.ingress.gitlab.tls }}
        ingress:
          enabled: {{ .Values.ingress.gitlab.enabled }}
          configureCertmanager: true
        psql:
          password:
            useSecret: true
            secret: {{ include "gitlab.name" . }}-postgres
            key: POSTGRES_PASSWORD
          host: {{ .Values.config.postgres.host | quote }}
          port: {{ .Values.config.postgres.port }}
          username: {{ .Values.config.postgres.username | quote }}
          database: {{ .Values.config.postgres.database | quote }}
          preparedStatements: false
        redis:
          password:
            enabled: true
        gitaly:
          enabled: true
          internal:
            names:
              - default
          tls:
            enabled: false
        praefect:
          enabled: false
        minio:
          enabled: {{ (not .Values.config.s3.enabled) }}
        grafana:
          enabled: false
        appConfig:
          enableUsagePing: false
          enableSeatLink: false
          enableImpersonation: true
          defaultCanCreateGroup: true
          usernameChangingEnabled: true
          defaultTheme:
          defaultProjectsFeatures:
            issues: true
            mergeRequests: true
            wiki: true
            snippets: true
            builds: true
          contentSecurityPolicy:
            enabled: false
            report_only: true
          object_store:
            enabled: {{ .Values.config.s3.enabled }}
            proxy_download: true
            connection:
              secret: store
              key: objectStoreConnection
          lfs:
            enabled: true
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "lfs") }}
            connection: {}
          artifacts:
            enabled: true
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "artifacts") }}
            connection: {}
          uploads:
            enabled: true
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "uploads") }}
            connection: {}
          packages:
            enabled: true
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "packages") }}
            connection: {}
          externalDiffs:
            enabled: false
            when:
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "external-diffs") }}
            connection: {}
          terraformState:
            enabled: false
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "terraform-state") }}
            connection: {}
          dependencyProxy:
            enabled: false
            proxy_download: true
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "dependency-proxy") }}
            connection: {}
          pseudonymizer:
            configMap:
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "pseudonymizer") }}
            connection: {}
          backups:
            bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "backups") }}
            tmpBucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "tmp") }}
          incomingEmail:
            enabled: false
            # address: ""
            # host: "imap.gmail.com"
            # port: 993
            # ssl: true
            # startTls: false
            # user: ""
            # password:
            #   secret: ""
            #   key: password
            # expungeDeleted: false
            # logger:
            #   logPath: '/dev/stdout'
            # mailbox: inbox
            # idleTimeout: 60
          serviceDeskEmail:
            enabled: false
            # address: ""
            # host: 'imap.gmail.com'
            # port: 993
            # ssl: true
            # startTls: false
            # user: ""
            # password:
            #   secret: ""
            #   key: password
            # expungeDeleted: false
            # logger:
            #   logPath: "/dev/stdout"
            # mailbox: inbox
            # idleTimeout: 60
          ldap:
            preventSignin: false
          omniauth:
            enabled: {{ .Values.config.keycloak.enabled }}
            allowBypassTwoFactor: []
            allowSingleSignOn: ['saml']
            autoLinkLdapUser: false
            autoLinkSamlUser: true
            autoLinkUser: ['saml']
            autoSignInWithProvider: {{ .Values.config.keycloak.autoSignIn | ternary "saml" "" }}
            blockAutoCreatedUsers: false
            externalProviders: []
            syncProfileAttributes: ['email']
            syncProfileFromProvider: ['saml']
            providers:
              {{- if .Values.config.keycloak.enabled }}
              - secret: {{ template "gitlab.name" . }}-omniauth
              {{- end }}
          sentry:
            enabled: false
          smartcard:
            enabled: false
        geo:
          enabled: false
        kas:
          enabled: false
        shell:
          port: 22
        rails:
          bootsnap:
            enabled: true
        registry:
          bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "registry") }}
        pages:
          enabled: false
          # accessControl: false
          # path:
          # host:
          # port:
          # https:
          # externalHttp: []
          # externalHttps: []
          # artifactsServer: true
          # objectStore:
          #   enabled: true
          #   bucket: {{ template "gitlab.bucket-name" (dict "values" .Values "bucket" "pages") }}
          #   connection: {}
          # apiSecret: {}
        smtp:
          enabled: false
          # address: smtp.mailgun.org
          # port: 2525
          # user_name: ""
          # password:
          #   secret: ""
          #   key: password
          # authentication: "plain"
          # starttls_auto: false
          # openssl_verify_mode: "peer"
        email:
          from: ''
          display_name: GitLab
          reply_to: ''
          subject_suffix: ''
          smime:
            enabled: false
            secretName: ""
            keyName: "tls.key"
            certName: "tls.crt"
        time_zone: UTC
        deployment:
          {{- if .Values.persistence.velero.enabled }}
          annotations:
            backup.velero.io/backup-volumes: data
          {{- else }}
          annotations: {}
          {{- end }}
        serviceAccount:
          enabled: false
          create: true
        extraEnv: {}
      certmanager-issuer:
        email: nope@nope.no
      certmanager:
        installCRDs: false
        install: false
      nginx-ingress:
        enabled: false
      prometheus:
        install: false
      redis:
        install: true
        usePasswordFile: true
      postgresql:
        install: false
      registry:
        enabled: false
      shared-secrets:
        enabled: true
        rbac:
          create: true
      gitlab-runner:
        install: {{ .Values.config.gitlabRunner.enable }}
        unregisterRunners: true
        preEntrypointScript: |
          {{- if (and .Values.config.gitlabRunner.cache.enabled (eq .Values.config.gitlabRunner.cache.type "pvc")) }}
          mkdir -p /tmp/gitlab/cache  /tmp/gitlab/build
          {{- end }}
          cat >> /home/gitlab-runner/.gitlab-runner/config.toml << EOF
          {{- if (and .Values.config.gitlabRunner.cache.enabled (eq .Values.config.gitlabRunner.cache.type "pvc")) }}
              [[runners.kubernetes.volumes.pvc]]
                name = '{{ .Values.persistence.existingClaim.gitlabRunner | default (printf "%s-gitlab-runner" (include "gitlab.name" . )) }}'
                mount_path = "/tmp/gitlab"
          {{- end }}
          {{- if .Values.config.gitlabRunner.docker.sock }}
              [[runners.kubernetes.volumes.host_path]]
                name = "docker-sock"
                mount_path = "/var/run/docker.sock"
          {{- end }}
          EOF
        rbac:
          create: true
        metrics:
          enabled: false
        runners:
          locked: false
          image: ubuntu:18.04
          imagePullPolicy: {{ (eq .Values.config.imagePullPolicy "Always") | ternary "always" "if-not-present" }}
          requestConcurrency: 1
          tags: ''
          runUntagged: true
          protected: false
          privileged: true
        securityContext:
          fsGroup: 65533
          runAsUser: 100
{{- if (and .Values.config.gitlabRunner.resources.enabled (not (eq .Values.config.gitlabRunner.resources.enabled "false"))) }}
        resources:
          limits:
{{ toYaml .Values.config.gitlabRunner.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.config.gitlabRunner.resources.requests | indent 12 }}
{{- else }}
        resources: {}
{{- end }}
        {{- if (and .Values.config.gitlabRunner.cache.enabled (eq .Values.config.gitlabRunner.cache.type "pvc")) }}
        envVars:
          - name: RUNNER_CACHE_DIR
            value: /tmp/gitlab/cache
          - name: RUNNER_BUILDS_DIR
            value: /tmp/gitlab/builds
        {{- end }}
        podAnnotations:
          gitlab.com/prometheus_scrape: 'true'
          gitlab.com/prometheus_port: 9252
      gitlab:
        toolbox:
          enabled: true
          replicas: 1
        gitlab-shell:
          enabled: true
          service:
            internalPort: 2222
            type: ClusterIP
        webservice:
          ingress:
            enabled: {{ .Values.ingress.gitlab.enabled }}
