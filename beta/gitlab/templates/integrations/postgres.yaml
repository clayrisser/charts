{{- if .Values.config.postgres.integration }}
{{- $name := (index (split "." .Values.config.postgres.integration) 1) | default "postgres" }}
{{- $namespace := (index (split "." (printf "%s." .Values.config.postgres.integration)) 0) }}
{{- $patchGitlab := true }}
apiVersion: integration.siliconhills.dev/v1alpha2
kind: Plug
metadata:
  name: postgres
  labels:
    app: {{ template "gitlab.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: postgres
    namespace: {{ $namespace }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    database: {{ .Values.config.postgres.database | quote }}
    createdb: 'true'
    cleanup: 'false'
    replicate: 'false'
  resources:
    - when: [coupled, updated]
      do: apply
      resource: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres
            namespace: {{ .Release.Namespace }}
          stringData:
            POSTGRES_PASSWORD: '{% .socketConfig.password %}'
{{- if $patchGitlab }}
    - when: [coupled, updated]
      do: recreate
      resource: |
        apiVersion: patch.bitspur.com/v1alpha1
        kind: Patch
        metadata:
          name: postgres-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          patches:
            - id: strategic
              target:
                version: v1
                kind: ConfigMap
                name: gitlab
              waitForTimeout: 5
              waitForResource: true
              skipIf:
                - jsonPath: data
                  regex: howdy
              patch: |-
                spec:
                  chart:
                    values:
                      global:
                        psql:
                          host: '{% .socketConfig.hostname %}'
                          port: '{% .socketConfig.port %}'
                          username: '{% .socketConfig.username %}'
                          database: '{% .plugConfig.database %}'
                          password:
                            useSecret: true
                            secret: postgres
                            key: POSTGRES_PASSWORD
{{- end }}
{{- end }}
