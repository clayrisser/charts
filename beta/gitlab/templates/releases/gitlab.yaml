apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "gitlab.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  forceUpgrade: false
  helmVersion: v3
  chart:
    repository: https://charts.gitlab.io
    name: gitlab
    version: 4.8.1
  values:
    global:
      common:
        labels: {}
      operator:
        enabled: false
        rollout:
          autoPause: true
      pod:
        labels: {}
      edition: ce
      # gitlabVersion: master
      application:
        create: false
        links: []
        allowClusterRoles: true
      hosts:
        domain: {{ template "gitlab.gitlab-hostname" . }}
        hostSuffix:
        https: {{ .Values.ingress.gitlab.tls }}
        externalIP:
        ssh: ~
        gitlab: {}
        minio: {}
        registry: {}
        tls: {}
        smartcard: {}
        kas: {}
        pages: {}
      ingress:
        configureCertmanager: false
        annotations:
          {{- if (eq .Values.config.clusterType "aks") }}
          kubernetes.io/ingress.class: addon-http-application-routing
          {{- else }}
          kubernetes.io/ingress.class: nginx
          {{- end }}
          {{- if .Values.ingress.gitlab.tls }}
          {{- if (empty .Values.ingress.gitlab.certificate) }}
          cert-manager.io/cluster-issuer: {{ .Values.ingress.gitlab.issuer.name }}
          kubernetes.io/tls-acme: 'true'
          {{- end }}
          nginx.ingress.kubernetes.io/ssl-redirect: 'true'
          {{- end }}
        enabled: {{ .Values.ingress.gitlab.enabled }}
        {{- if .Values.ingress.gitlab.tls }}
        tls:
          enabled: true
          secretName: {{ template "gitlab.gitlab-certificate" . }}
        {{- else }}
        tls: {}
        {{- end }}
      gitlab:
        license: {}
      initialRootPassword:
        secret: {{ template "gitlab.fullname" . }}
        key: password
      psql:
        connectTimeout:
        password:
          useSecret: true
          secret: {{ include "gitlab.postgres-storage" . }}
          key: POSTGRES_PASSWORD
          file:
        host: {{ .Values.config.postgres.host | quote }}
        port: {{ .Values.config.postgres.port }}
        username: {{ .Values.config.postgres.username | quote }}
        database: {{ .Values.config.postgres.database | quote }}
        applicationName:
        preparedStatements: false
      redis:
        password:
          enabled: true
      gitaly:
        enabled: true
        authToken: {}
        internal:
          names: ['default']
        external: []
        service:
          name: gitaly
          type: ClusterIP
          externalPort: 8075
          internalPort: 8075
          tls:
            externalPort: 8076
            internalPort: 8076
        tls:
          enabled: false
      praefect:
        enabled: false
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        virtualStorages:
          - name: default
            gitalyReplicas: 3
            maxUnavailable: 1
        psql:
          sslMode: 'disable'
        service:
          name: praefect
          type: ClusterIP
          externalPort: 8075
          internalPort: 8075
          tls:
            externalPort: 8076
            internalPort: 8076
        tls:
          enabled: false
      minio:
        enabled: false
        credentials: {}
      grafana:
        enabled: false
      appConfig:
        enableUsagePing: true
        enableSeatLink: true
        enableImpersonation:
        defaultCanCreateGroup: true
        usernameChangingEnabled: true
        issueClosingPattern:
        defaultTheme:
        defaultProjectsFeatures:
          issues: true
          mergeRequests: true
          wiki: true
          snippets: true
          builds: true
        webhookTimeout:
        maxRequestDurationSeconds:
        cron_jobs: {}
        contentSecurityPolicy:
          enabled: false
          report_only: true
        gravatar:
          plainUrl:
          sslUrl:
        extra:
          googleAnalyticsId:
          matomoUrl:
          matomoSiteId:
        object_store:
          enabled: true
          proxy_download: true
          storage_options: {}
          connection:
            secret: {{ template "gitlab.fullname" . }}-gitlab
            key: objectStoreConnection
        lfs:
          enabled: true
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-lfs
          connection: {}
        artifacts:
          enabled: true
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-artifacts
          connection: {}
        uploads:
          enabled: true
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-uploads
          connection: {}
        packages:
          enabled: true
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-packages
          connection: {}
        externalDiffs:
          enabled: false
          when:
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-mr-diffs
          connection: {}
        terraformState:
          enabled: false
          bucket: {{ .Values.config.storage.s3.namespace }}-terraform-state
          connection: {}
        dependencyProxy:
          enabled: false
          proxy_download: true
          bucket: {{ .Values.config.storage.s3.namespace }}-dependency-proxy
          connection: {}
        pseudonymizer:
          configMap:
          bucket: {{ .Values.config.storage.s3.namespace }}-pseudo
          connection: {}
        backups:
          bucket: {{ .Values.config.storage.s3.namespace }}-backups
          tmpBucket: tmp
        incomingEmail:
          enabled: false
          address: ""
          host: "imap.gmail.com"
          port: 993
          ssl: true
          startTls: false
          user: ""
          password:
            secret: ""
            key: password
          expungeDeleted: false
          logger:
            logPath: "/dev/stdout"
          mailbox: inbox
          idleTimeout: 60
        serviceDeskEmail:
          enabled: false
          address: ""
          host: "imap.gmail.com"
          port: 993
          ssl: true
          startTls: false
          user: ""
          password:
            secret: ""
            key: password
          expungeDeleted: false
          logger:
            logPath: "/dev/stdout"
          mailbox: inbox
          idleTimeout: 60
        ldap:
          preventSignin: false
          servers: {}
        gitlab_kas: {}
        omniauth:
          enabled: false
          autoSignInWithProvider:
          syncProfileFromProvider: []
          syncProfileAttributes: ['email']
          allowSingleSignOn: ['saml']
          blockAutoCreatedUsers: true
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          externalProviders: []
          allowBypassTwoFactor: []
          providers: []
        sentry:
          enabled: false
          dsn:
          clientside_dsn:
          environment:
        smartcard:
          enabled: false
          CASecret:
          clientCertificateRequiredHost:
          sanExtensions: false
          requiredForGitAccess: false
        initialDefaults: {}
      geo:
        enabled: false
        role: primary
        nodeName: gitlab.gitlab.host
        psql:
          password: {}
      kas:
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
      railsSecrets: {}
      rails:
        bootsnap:
          enabled: true
      registry:
        bucket: {{ .Values.config.storage.s3.namespace }}-registry
        certificate: {}
        httpSecret: {}
        notifications: {}
      pages:
        enabled: false
        accessControl: false
        path:
        host:
        port:
        https:
        externalHttp: []
        externalHttps: []
        artifactsServer: true
        objectStore:
          enabled: true
          bucket: {{ .Values.config.storage.s3.namespace }}-pages
          connection: {}
        apiSecret: {}
      runner:
        registrationToken: {}
      smtp:
        enabled: false
        address: smtp.mailgun.org
        port: 2525
        user_name: ""
        password:
          secret: ""
          key: password
        authentication: "plain"
        starttls_auto: false
        openssl_verify_mode: "peer"
      email:
        from: ''
        display_name: GitLab
        reply_to: ''
        subject_suffix: ''
        smime:
          enabled: false
          secretName: ""
          keyName: "tls.key"
          certName: "tls.crt"
      time_zone: UTC
      service:
        labels: {}
        annotations: {}
      deployment:
        {{- if .Values.persistence.velero.enabled }}
        annotations:
          backup.velero.io/backup-volumes: data
        {{- else }}
        annotations: {}
        {{- end }}
      antiAffinity: soft
      workhorse:
        serviceName: webservice-default
      webservice:
        workerTimeout: 60
      certificates:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/alpine-certificates
          tag: 20191127-r2
        customCAs: []
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
          tag: 1.13.12
          pullSecrets: []
        securityContext:
          runAsUser: 65534
          fsGroup: 65534
      busybox:
        image:
          repository: busybox
          tag: latest
      serviceAccount:
        enabled: false
        create: true
        annotations: {}
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      extraEnv: {}
    upgradeCheck:
      enabled: true
      image: {}
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      tolerations: []
      resources:
        requests:
          cpu: 50m
    certmanager:
      createCustomResource: true
      nameOverride: cert-manager
      install: false
      rbac:
        create: true
      webhook:
        enabled: false
    nginx-ingress:
      enabled: false
      tcpExternalConfig: "true"
      controller:
        addHeaders:
          Referrer-Policy: strict-origin-when-cross-origin
        config:
          hsts: "false"
          hsts-include-subdomains: "false"
          server-name-hash-bucket-size: "256"
          use-http2: "true"
          ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"
          ssl-protocols: "TLSv1.3 TLSv1.2"
          server-tokens: "false"
        service:
          externalTrafficPolicy: "Local"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        publishService:
          enabled: true
        replicaCount: 2
        minAvailable: 1
        scope:
          enabled: true
        metrics:
          enabled: true
          service:
            annotations:
              gitlab.com/prometheus_scrape: "true"
              gitlab.com/prometheus_port: "10254"
              prometheus.io/scrape: "true"
              prometheus.io/port: "10254"
        admissionWebhooks:
          enabled: false
      defaultBackend:
        enabled: true
        minAvailable: 1
        replicaCount: 1
        resources:
          requests:
            cpu: 5m
            memory: 5Mi
      rbac:
        create: true
        scope: true
      serviceAccount:
        create: true
    prometheus:
      install: false
      rbac:
        create: true
      alertmanager:
        enabled: false
      alertmanagerFiles:
        alertmanager.yml: {}
      kubeStateMetrics:
        enabled: false
      nodeExporter:
        enabled: false
      pushgateway:
        enabled: false
      server:
        retention: 15d
      serverFiles:
        prometheus.yml:
          scrape_configs:
            - job_name: prometheus
              static_configs:
                - targets:
                  - localhost:9090
            - job_name: 'kubernetes-apiservers'
              kubernetes_sd_configs:
                - role: endpoints
              scheme: https
              tls_config:
                ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                insecure_skip_verify: true
              bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              relabel_configs:
                - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                  action: keep
                  regex: default;kubernetes;https
            - job_name: 'kubernetes-pods'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape]
                  action: keep
                  regex: true
                - source_labels: [__meta_kubernetes_pod_annotation_gitlab_com_prometheus_path]
                  action: replace
                  target_label: __metrics_path__
                  regex: (.+)
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  target_label: __address__
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: kubernetes_namespace
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: kubernetes_pod_name
            - job_name: 'kubernetes-service-endpoints'
              kubernetes_sd_configs:
                - role: endpoints
              relabel_configs:
                - action: keep
                  regex: true
                  source_labels:
                    - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
                - action: replace
                  regex: (https?)
                  source_labels:
                    - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
                  target_label: __scheme__
                - action: replace
                  regex: (.+)
                  source_labels:
                    - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
                  target_label: __metrics_path__
                - action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: $1:$2
                  source_labels:
                    - __address__
                    - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
                  target_label: __address__
                - action: labelmap
                  regex: __meta_kubernetes_service_label_(.+)
                - action: replace
                  source_labels:
                    - __meta_kubernetes_namespace
                  target_label: kubernetes_namespace
                - action: replace
                  source_labels:
                    - __meta_kubernetes_service_name
                  target_label: kubernetes_name
                - action: replace
                  source_labels:
                    - __meta_kubernetes_pod_node_name
                  target_label: kubernetes_node
            - job_name: 'kubernetes-services'
              metrics_path: /probe
              params:
                module: [http_2xx]
              kubernetes_sd_configs:
                - role: service
              relabel_configs:
                - source_labels: [__meta_kubernetes_service_annotation_gitlab_com_prometheus_probe]
                  action: keep
                  regex: true
                - source_labels: [__address__]
                  target_label: __param_target
                - target_label: __address__
                  replacement: blackbox
                - source_labels: [__param_target]
                  target_label: instance
                - action: labelmap
                  regex: __meta_kubernetes_service_label_(.+)
                - source_labels: [__meta_kubernetes_namespace]
                  target_label: kubernetes_namespace
                - source_labels: [__meta_kubernetes_service_name]
                  target_label: kubernetes_name
    redis:
      install: true
      existingSecret: gitlab-redis-secret
      existingSecretKey: redis-password
      usePasswordFile: true
      cluster:
        enabled: false
      metrics:
        enabled: true
    postgresql:
      postgresqlUsername: gitlab
      postgresqlPostgresPassword: bogus
      install: false
      postgresqlDatabase: gitlabhq_production
      image:
        tag: 11.9.0
      usePasswordFile: true
      existingSecret: 'bogus'
      initdbScriptsConfigMap: 'bogus'
      master:
        extraVolumeMounts:
          - name: custom-init-scripts
            mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
            subPath: init_revision.sh
        podAnnotations:
          postgresql.gitlab/init-revision: "1"
      metrics:
        enabled: true
    registry:
      enabled: false
    shared-secrets:
      enabled: true
      rbac:
        create: true
    gitlab-runner:
      install: false
      rbac:
        create: true
      runners:
        locked: false
        cache:
          cacheType: s3
          s3BucketName: {{ .Values.config.storage.s3.namespace }}-runner-cache
          cacheShared: true
          s3BucketLocation: us-east-1
          s3CachePath: gitlab-runner
          s3CacheInsecure: false
      podAnnotations:
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: 9252
    grafana:
      admin:
        existingSecret: bogus
      env:
        GF_SECURITY_ADMIN_USER: bogus
        GF_SECURITY_ADMIN_PASSWORD: bogus
      command: [ "sh", "-x", "/tmp/scripts/import-secret.sh" ]
      sidecar:
        dashboards:
          enabled: true
          label: gitlab_grafana_dashboard
        datasources:
          enabled: true
          label: gitlab_grafana_datasource
      grafana.ini:
        server:
          root_url: http://localhost/-/grafana/
      extraSecretMounts:
        - name: initial-password
          mountPath: /tmp/initial
          readOnly: true
          secretName: gitlab-grafana-initial-password
          defaultMode: 400
      extraConfigmapMounts:
        - name: import-secret
          mountPath: /tmp/scripts
          configMap: gitlab-grafana-import-secret
          readOnly: true
      testFramework:
        enabled: false
    gitlab:
      task-runner:
        enabled: false
        replicas: 1
        antiAffinityLabels:
          matchLabels:
            app: 'gitaly'
      # webservice:
      #   deployments:
      #     default:
      #       hpa:
      #         minReplicas: 1
      #         maxReplicas: 1
