apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: codechem
  labels:
    app.kubernetes.io/name: {{ template "penpot.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://charts.codechem.com
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "penpot.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  chart:
    spec:
      chart: penpot
      version: {{ .Chart.Version | quote }}
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: codechem
  values:
    global:
      postgresqlEnabled: false
      redisEnabled: true
      imagePullSecrets: []
    serviceAccount:
      enabled: true
      annotations: {}
    backend:
      image:
        repository: {{ .Values.images.backend.repository }}
        tag: {{ .Values.images.backend.tag }}
        imagePullPolicy: {{ .Values.config.imagePullPolicy }}
      replicaCount: {{ .Values.config.backend.replicas }}
      service:
        type: ClusterIP
        port: 6060
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - all
        readOnlyRootFilesystem: false
        runAsNonRoot: true
      affinity: {}
      nodeSelector: {}
      tolerations: []
      resources:
        requests:
{{ toYaml .Values.config.backend.resources.requests | indent 10 }}
        limits:
{{ toYaml .Values.config.backend.resources.limits | indent 10 }}
    {{- else }}
      resources: {}
    {{- end }}
    frontend:
      image:
        repository: {{ .Values.images.frontend.repository }}
        tag: {{ .Values.images.frontend.tag }}
        imagePullPolicy: {{ .Values.config.imagePullPolicy }}
      replicaCount: {{ .Values.config.frontend.replicas }}
      service:
        type: ClusterIP
        port: 80
      ingress:
        enabled: {{ .Values.ingress.penpot.enabled }}
        annotations:
          {{- if .Values.ingress.penpot.tls }}
          {{- if (not .Values.ingress.penpot.certificate) }}
          kubernetes.io/tls-acme: 'true'
          {{- $issuerName := (eq .Values.ingress.penpot.issuer.name "custom") | ternary .Values.ingress.penpot.issuer.customName .Values.ingress.penpot.issuer.name }}
          {{- if $issuerName }}
          cert-manager.io/cluster-issuer: {{ $issuerName }}
          {{- end }}
          {{- end }}
          nginx.ingress.kubernetes.io/ssl-redirect: 'true'
          {{- end }}
        hosts:
          - {{ .Values.ingress.penpot.hostname }}
        {{- if .Values.ingress.penpot.tls }}
        tls:
          - secretName: {{ template "penpot.penpot-certificate" . }}
            hosts:
              - {{ .Values.ingress.penpot.hostname }}
        {{- end }}
      affinity: {}
      nodeSelector: {}
      tolerations: []
      resources:
        requests:
{{ toYaml .Values.config.frontend.resources.requests | indent 10 }}
        limits:
{{ toYaml .Values.config.frontend.resources.limits | indent 10 }}
    {{- else }}
      resources: {}
    {{- end }}
    exporter:
      image:
        repository: {{ .Values.images.exporter.repository }}
        tag: {{ .Values.images.exporter.tag }}
        imagePullPolicy: {{ .Values.config.imagePullPolicy }}
      replicaCount: {{ .Values.config.exporter.replicas }}
      service:
        type: ClusterIP
        port: 6061
      podSecurityContext:
        enabled: true
        fsGroup: 1001
      containerSecurityContext:
        enabled: true
        runAsUser: 1001
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - all
        readOnlyRootFilesystem: false
        runAsNonRoot: true
      affinity: {}
      nodeSelector: {}
      tolerations: []
      resources:
        requests:
{{ toYaml .Values.config.exporter.resources.requests | indent 10 }}
        limits:
{{ toYaml .Values.config.exporter.resources.limits | indent 10 }}
    {{- else }}
      resources: {}
    {{- end }}
    persistence:
      enabled: {{ .Values.config.persistence.enabled }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClass: ''
      {{- else }}
      storageClass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
      size: {{ .Values.config.persistence.size.penpot }}
      existingClaim: {{ .Values.config.persistence.existingClaim.penpot | default "" | quote }}
      accessModes:
        - {{ .Values.config.persistence.accessModes | quote }}
    config:
      publicURI: {{ template "penpot.penpot-base-url" . }}
      flags: "enable-registration enable-login disable-demo-users disable-demo-warning"
      apiSecretKey: "b46a12cb4bedc6b9df8cb3f18c708b65"
      postgresql:
        host: {{ .Values.config.postgres.host | quote }}
        port: {{ .Values.config.postgres.port }}
        database: {{ .Values.config.postgres.database | quote }}
        existingSecret: postgres
        secretKeys:
          usernameKey: username
          passwordKey: password
      redis:
        host: "redis-headless.penpot.svc.cluster.local"
        port: 6379
        database: "0"
      assets:
        storageBackend: "assets-fs"
        filesystem:
          directory: "/opt/data/assets"
        s3:
          accessKeyID: ""
          secretAccessKey: ""
          region: ""
          bucket: ""
          endpointURI: ""
          existingSecret: ""
          secretKeys:
            accessKeyIDKey: ""
            secretAccessKey: ""
            endpointURIKey: ""
      telemetryEnabled: false
      smtp:
        enabled: false
        defaultFrom: ""
        defaultReplyTo: ""
        host: ""
        port: ""
        username: ""
        password: ""
        tls: true
        ssl: false
        existingSecret: ""
        secretKeys:
          usernameKey: ""
          passwordKey: ""
      registrationDomainWhitelist: ""
      providers:
        oidc:
          enabled: false
          baseURI: ""
          clientID: ""
          clientSecret: ""
          authURI: ""
          tokenURI: ""
          userURI: ""
          roles: "role1 role2"
          rolesAttribute: ""
          scopes: "scope1 scope2"
          nameAttribute: ""
          emailAttribute: ""
        ldap:
          enabled: false
          host: "ldap"
          port: 10389
          ssl: false
          startTLS: false
          baseDN: "ou=people,dc=planetexpress,dc=com"
          bindDN: "cn=admin,dc=planetexpress,dc=com"
          bindPassword: "GoodNewsEveryone"
          attributesUsername: "uid"
          attributesEmail: "mail"
          attributesFullname: "cn"
          attributesPhoto: "jpegPhoto"
        existingSecret: ""
        secretKeys:
          googleClientIDKey: ""
          googleClientSecretKey: ""
          githubClientIDKey: ""
          githubClientSecretKey: ""
          gitlabClientIDKey: ""
          gitlabClientSecretKey: ""
          oidcClientIDKey: ""
          oidcClientSecretKey: ""
    redis:
      auth:
        enabled: false
