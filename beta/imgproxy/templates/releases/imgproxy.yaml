apiVersion: v1
kind: HelmRepository
metadata:
  name: imgproxy
  labels:
    app.kubernetes.io/name: {{ template "imgproxy.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://helm.imgproxy.net
---
apiVersion: v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "imgproxy.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  chart:
    spec:
      chart: imgproxy
      version: {{ .Chart.Version | quote }}
      sourceRef:
        apiVersion: v1
        kind: HelmRepository
        name: imgproxy
values:
    global:
      imgproxyDomain: {{ .Values.config.imgproxy.domain | quote }}
    replicaCount: {{ .Values.config.imgproxy.replicas }}
    updateStrategy:
      type: {{ .Values.config.updateStrategy | quote }}
    image:
      repository: {{ .Values.images.imgproxy.repository | quote }}
      tag: {{ .Values.images.imgproxy.tag | quote }}
      pullPolicy: {{ .Values.config.imagePullPolicy }}
    logLevel: {{ .Values.config.debug | ternary "debug" "info" }}
    existingSecret: {{ template "imgproxy.name" . }}
    customTLS:
      enabled: {{ .Values.service.imgproxy.tls.enabled }}
      secret: {{ template "imgproxy.imgproxy-certificate" . }}
      CA:
        enabled: 'true'
    {{- if .Values.persistence.velero.enabled }}
    podAnnotations:
      backup.velero.io/backup-volumes: data
      pre.hook.backup.velero.io/timeout: 3m
      pre.hook.backup.velero.io/command: |
        ["/bin/bash", "-c", "cd /var/lib/ldap && rm -rf *.ldif && slapcat -n 0 -l config.ldif && slapcat -n 1 -l data.ldif"]
    {{- else }}
    podAnnotations: {}
    {{- end }}
    service:
      annotations: {}
      {{- if (eq .Values.service.openldap.type "NodePort") }}
      ldapPortNodePort: {{ .Values.service.imgproxy.nodePorts.ldap }}
      sslLdapPortNodePort: {{ .Values.service.imgproxy.nodePorts.ldaps }}
      {{- end }}
      externalIPs: []
      # loadBalancerIP:
      # loadBalancerSourceRanges: []
      type: {{ .Values.service.imgproxy.type | quote }}
    replication:
      enabled: true
      clusterName: 'cluster.local'
      retry: 60
      timeout: 1
      interval: 00:00:00:10
      starttls: 'yes'
      tls_reqcert: 'never'
    persistence:
      enabled: {{ .Values.persistence.enabled }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClass: ''
      {{- else }}
      storageClass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
      {{- end }}
      accessModes:
        - {{ .Values.persistence.accessMode | quote }}
      size: {{ .Values.persistence.size.openldap | quote }}
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
{{- if (and .Values.config.imgproxy.resources.enabled (not (eq .Values.config.imgproxy.resources.enabled "false"))) }}
    resources:
      requests:
{{ toYaml .Values.config.imgproxy.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.imgproxy.resources.limits | indent 8 }}
{{- else }}
    resources: {}
{{- end }}

