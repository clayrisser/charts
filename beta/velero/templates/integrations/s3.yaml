{{- if .Values.config.s3.integration }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1alpha2
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "velero.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: s3
    namespace: {{ $namespace }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
  resources:
    - when: [coupled, updated]
      do: apply
      resource: |
        apiVersion: patch.rock8s.com/v1alpha1
        kind: Patch
        metadata:
          name: s3-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          epoch: {{ now | unixEpoch | quote }}
          patches:
            - id: cloud-credentials
              target:
                version: v1
                kind: Secret
                name: cloud-credentials
              waitForResource: true
              type: json
              patch: |-
                - op: replace
                  path: /data/cloud
                  value: {% printf "[default]\naws_access_key_id=%s\naws_secret_access_key=%s" .socketConfig.accessKey .socketConfig.secretKey | b64enc | quote %}
            - id: helm-chart
              target:
                group: helm.toolkit.fluxcd.io
                version: v2beta1
                kind: HelmRelease
                name: {{ .Release.Name }}-release
              waitForResource: true
              type: merge
              patch: |-
                spec:
                  values:
                    configuration:
                      backupStorageLocation:
                        bucket: {% .socketConfig.bucket %}
                        prefix: {{ .Values.config.s3.prefix | quote }}
                        config:
                          region: {% .socketConfig.region %}
                          s3Url: {% (printf "http%s://%s" ((eq .socketConfig.tls "1") | ternary "s" "") .socketConfig.endpoint) | quote %}
{{- end }}
