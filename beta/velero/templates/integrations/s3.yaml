{{- if .Values.config.s3.integration }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1alpha2
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "velero.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: s3
    namespace: {{ $namespace }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
  resources:
    - when: [coupled, updated]
      do: apply
      resource: |
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: s3-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          validationFailureAction: enforce
          background: true
          rules:
            - name: secret
              match:
                all:
                  resources:
                    kinds:
                      - core/*/Secret
                    names:
                      - cloud-credentials
              mutate:
                patchesJson6902: |-
                  - op: replace
                    path: /data/cloud
                    value: {% printf "[default]\naws_access_key_id=%s\naws_secret_access_key=%s" .socketConfig.accessKey .socketConfig.secretKey | b64enc | quote %}
            - name: helm-release
              match:
                all:
                  resources:
                    kinds:
                      - helm.toolkit.fluxcd.io/*/HelmRelease
                    names:
                      - {{ .Release.Name }}-release
              mutate:
                patchStrategicMerge:
                  spec:
                    values:
                      configuration:
                        backupStorageLocation:
                          bucket: {% .socketConfig.bucket %}
                          prefix: {{ .Values.config.s3.prefix | quote }}
                          config:
                            region: {% .socketConfig.region %}
                            {%- if (contains "amazonaws.com" .socketConfig.endpoint) %}
                            s3Url: {% (printf "http%s://s3.%s.amazonaws.com" ((eq .socketConfig.tls "1") | ternary "s" "") .socketConfig.region) | quote %}
                            {%- else %}
                            s3Url: {% (printf "http%s://%s" ((eq .socketConfig.tls "1") | ternary "s" "") .socketConfig.endpoint) | quote %}
                            {%- end %}
{{- end }}
