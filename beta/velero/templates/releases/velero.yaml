apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: vmware-tanzu
  labels:
    app.kubernetes.io/name: {{ template "velero.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://vmware-tanzu.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "velero.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  suspend: true
  chart:
    spec:
      chart: velero
      reconcileStrategy: string
      version: 2.31.6
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: vmware-tanzu
  values:
    image:
      repository: velero/velero
      tag: v1.9.1
      pullPolicy: IfNotPresent
      imagePullSecrets: []
    podAnnotations: {}
    podLabels: {}
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 128Mi
    dnsPolicy: ClusterFirst
    initContainers:
      {{- if (eq .Values.velero.configuration.volumeSnapshotLocation.provider "velero.io/aws") }}
      - name: velero-plugin-for-aws
        image: velero/velero-plugin-for-aws:v1.5.0
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /target
            name: plugins
      {{- else if (eq .Values.velero.configuration.volumeSnapshotLocation.provider "digitalocean.com/velero") }}
      - name: velero-plugin-for-digitalocean
        image: digitalocean/velero-plugin:v1.1.0
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: /target
            name: plugins
      {{- end }}
    securityContext: {}
    priorityClassName: ""
    tolerations: []
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/arch
                  operator: In
                  values:
                    - amd64
    nodeSelector: {}
    extraVolumes: []
    extraVolumeMounts: []
    metrics:
      enabled: {{ .Values.velero.metrics.enabled }}
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/metrics"
    installCRDs: true
    enableHelmHooks: true
    configuration:
      provider: {{ .Values.velero.configuration.provider }}
      backupStorageLocation:
        bucket: {{ .Values.config.s3.bucket }}
        caCert:
        name: default
        prefix: {{ .Values.config.s3.prefix }}
        config:
          profile: default
          region: {{ .Values.config.s3.region }}
          {{- if .Values.config.s3.endpoint }}
          s3Url: {{ printf "http%s://%s" (.Values.config.s3.tls | ternary "s" "") .Values.config.s3.endpoint }}
          {{- end }}
      volumeSnapshotLocation:
        name: default
        provider: {{ .Values.velero.configuration.volumeSnapshotLocation.provider }}
        config:
          profile: default
          region: {{ .Values.velero.configuration.volumeSnapshotLocation.config.region }}
      backupSyncPeriod:
      resticTimeout:
      restoreResourcePriorities:
      restoreOnlyMode:
      extraEnvVars: {}
      features:
      logLevel:
      logFormat:
      defaultVolumesToRestic:
    rbac:
      create: true
      clusterAdministrator: true
    serviceAccount:
      server:
        create: true
        name:
        annotations:
    credentials:
      useSecret: true
      name:
      existingSecret: cloud-credentials
      secretContents: {}
      extraEnvVars: {}
      extraSecretRef: ""
    backupsEnabled: {{ .Values.velero.backupsEnabled }}
    snapshotsEnabled: {{ .Values.velero.snapshotsEnabled }}
    deployRestic: {{ .Values.velero.deployRestic }}
    restic:
      podVolumePath: /var/lib/kubelet/pods
      privileged: false
      priorityClassName: ""
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 128Mi
      tolerations: []
      extraVolumes: []
      extraVolumeMounts: []
      dnsPolicy: ClusterFirst
      securityContext: {}
    schedules: {}
    configMaps: {}
