{{- if (not (empty .Values.config.keycloak.integration)) }}
{{- $existingSecret := lookup "v1" "Secret" .Release.Namespace "keycloak-plug" }}
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-plug
type: Opaque
data:
{{- if (and $existingSecret $existingSecret.data) }}
{{- if $existingSecret.data.clientSecret }}
  clientSecret: {{ $existingSecret.data.clientSecret }}
{{- else }}
  clientSecret: {{ .Values.config.keycloak.clientSecret | default (randAlphaNum 24) | b64enc | quote }}
{{- end }}
{{- else }}
  clientSecret: {{ .Values.config.keycloak.clientSecret | default (randAlphaNum 24) | b64enc | quote }}
{{- end }}
---
{{- $name := (split "." .Values.config.keycloak.integration)._1 | default "keycloak" }}
{{- $namespace := (split "." (printf "%s." .Values.config.keycloak.integration))._0 }}
apiVersion: integration.risserlabs.com/v1alpha2
kind: Plug
metadata:
  name: keycloak
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: keycloak
    namespace: {{ $namespace }}
  socket:
    name: keycloak
    namespace: {{ $namespace }}
  config:
    clientId: {{ .Values.config.keycloak.clientId }}
    redirectUris: '*'
    replicate: 'false'
    cleanup: 'false'
  configSecretName: keycloak-plug
  resources:
    - when: [coupled, updated]
      do: recreate
      resource: |
        apiVersion: patch.risserlabs.com/v1alpha1
        kind: Patch
        metadata:
          name: keycloak-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          epoch: {% now | unixEpoch | quote %}
          patches:
            - id: release
              target:
                group: helm.toolkit.fluxcd.io
                version: v2beta1
                kind: HelmRelease
                name: {{ .Release.Name }}-release
              waitForTimeout: 5
              waitForResource: true
              type: json
              patch: |
                - op: replace
                  path: /spec/values/env/openidClientId
                  value: {% .plugConfig.clientId | quote %}
                - op: replace
                  path: /spec/values/env/openidClientSecret
                  value: {% .plugConfig.clientSecret | quote %}
                - op: replace
                  path: /spec/values/env/openidTokenUrl
                  value: '{% .socketConfig.keycloakBaseUrl %}/realms/{% .socketConfig.keycloakRealm %}/protocol/openid-connect/token'
                - op: replace
                  path: /spec/values/env/openidUserUrl
                  value: '{% .socketConfig.keycloakBaseUrl %}/realms/{% .socketConfig.keycloakRealm %}/protocol/openid-connect/userinfo'
                - op: replace
                  path: /spec/values/env/openidUrl
                  value: '{% .socketConfig.keycloakBaseUrl %}/realms/{% .socketConfig.keycloakRealm %}/protocol/openid-connect/auth'
{{- end }}
