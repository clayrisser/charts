{{- if (and .Values.config.s3.enabled .Values.config.s3.integration) }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1beta1
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "nextcloud.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
  resources:
    - when: [coupled, updated]
      do: apply
      template: |
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: s3-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          validationFailureAction: enforce
          background: true
          rules:
            - name: helm-release
              match:
                resources:
                  kinds:
                    - helm.toolkit.fluxcd.io/*/HelmRelease
                  names:
                    - {{ .Release.Name }}-release
              mutate:
                patchesJson6902: |-
                  - op: replace
                    path: /spec/values/nextcloud/configs/s3.config.php
                    value: |
                      <?php
                      \$CONFIG = array (
                        'objectstore' => array(
                          'class' => '\\OC\\Files\\ObjectStore\\S3',
                          'arguments' => array(
                            'autocreate'     => false,
                            'bucket'         => '{% .plugConfig.bucket %}',
                            'endpoint'       => '{% .socketConfig.endpoint %}',
                            'key'            => '{% .socketConfig.accessKey %}',
                            'region'         => '{% .socketConfig.region %}',
                            'secret'         => '{% .socketConfig.secretKey %}',
                            'use_path_style' => false,
                            'use_ssl'        => {% (.socketConfig.tls "1") | ternary "true" "false" %},
                          )
                        )
                      );
{{- end }}
