{{- if (and .Values.config.s3.enabled .Values.config.s3.integration) }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1beta1
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "nextcloud.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
    create: '1'
    preserve: {{ .Values.config.s3.preserve | ternary "1" "0" | quote }}
  resultResources:
    - do: recreate
      stringTemplate: |
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: s3-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          background: true
          mutateExistingOnPolicyUpdate: true
          schemaValidation: false
          rules:
            - name: helmrelease
              match:
                resources:
                  kinds:
                    - helm.toolkit.fluxcd.io/*/HelmRelease
                  names:
                    - {{ .Release.Name }}-release
              mutate:
                targets:
                  - apiVersion: helm.toolkit.fluxcd.io/v2beta1
                    kind: HelmRelease
                    name: {{ .Release.Name }}-release
                patchStrategicMerge:
                  spec:
                    values:
                      nextcloud:
                        configs:
                          s3.config.php: |
                            <?php
                            {%- if (not (and .socketConfig.accessKey .socketConfig.secretKey)) %}
                            $credentials = apcu_exists('irsaCredentials') ? apcu_fetch('irsaCredentials') : [];
                            $current_time = new DateTime();
                            $expiration_time = isset($credentials['Expiration']) ? new DateTime($credentials['Expiration']) : $current_time;
                            if ($current_time >= $expiration_time) $credentials = [];
                            if (empty($credentials)) {
                              try {
                                $ch = curl_init();
                                curl_setopt_array($ch, [
                                  CURLOPT_URL => 'https://sts.amazonaws.com/',
                                  CURLOPT_POST => true,
                                  CURLOPT_RETURNTRANSFER => true,
                                  CURLOPT_POSTFIELDS => http_build_query([
                                    'Action' => 'AssumeRoleWithWebIdentity',
                                    'RoleArn' => "{% .socketResult.roleArn %}",
                                    'RoleSessionName' => "NextCloudSession",
                                    'WebIdentityToken' => file_get_contents('/var/run/secrets/kubernetes.io/serviceaccount/token'),
                                    'Version' => '2011-06-15'
                                  ])
                                ]);
                                $response = curl_exec($ch);
                                curl_close ($ch);
                                if ($response !== false) {
                                  $xml = simplexml_load_string($response);
                                  $credentials = [
                                    'AccessKeyId' => (string) $xml->AssumeRoleWithWebIdentityResult->Credentials->AccessKeyId,
                                    'SecretAccessKey' => (string) $xml->AssumeRoleWithWebIdentityResult->Credentials->SecretAccessKey,
                                    'SessionToken' => (string) $xml->AssumeRoleWithWebIdentityResult->Credentials->SessionToken,
                                    'Expiration' => (string) $xml->AssumeRoleWithWebIdentityResult->Credentials->Expiration
                                  ];
                                  apcu_store('irsaCredentials', $credentials);
                                }
                              } catch (Exception $e) {
                                error_log($e->getMessage());
                              }
                            }
                            {%- end %}
                            $CONFIG = [
                              'objectstore' => [
                                'class' => '\\OC\\Files\\ObjectStore\\S3',
                                'arguments' => [
                                  'autocreate'     => false,
                                  'bucket'         => '{% .plugConfig.bucket %}',
                                  'endpoint'       => '{% .socketConfig.endpoint %}',
                                  'region'         => '{% .socketConfig.region %}',
                                  'use_path_style' => false,
                                  'use_ssl'        => {% (eq .socketConfig.tls "1") | ternary "true" "false" %},
                                  {%- if (and .socketConfig.accessKey .socketConfig.secretKey) %}
                                  'key'            => '{% .socketConfig.accessKey %}',
                                  'secret'         => '{% .socketConfig.secretKey %}',
                                  {%- else %}
                                  'key'            => isset($credentials['AccessKeyId']) ? $credentials['AccessKeyId'] : '',
                                  'secret'         => isset($credentials['SecretAccessKey']) ? $credentials['SecretAccessKey'] : '',
                                  'token'          => isset($credentials['SessionToken']) ? $credentials['SessionToken'] : '',
                                  {%- end %}
                                ]
                              ]
                            ];
            - name: serviceaccount
              match:
                resources:
                  kinds:
                    - /*/ServiceAccount
                  names:
                    - nextcloud-serviceaccount
              mutate:
                targets:
                  - apiVersion: v1
                    kind: ServiceAccount
                    name: nextcloud-serviceaccount
                patchStrategicMerge:
                  metadata:
                    annotations:
                      eks.amazonaws.com/role-arn: {% .socketResult.roleArn | quote %}
{{- end }}
