{{- if (and .Values.config.s3.enabled .Values.config.s3.integration) }}
{{- $name := (split "." .Values.config.s3.integration)._1 | default "s3" }}
{{- $namespace := (split "." (printf "%s." .Values.config.s3.integration))._0 }}
apiVersion: integration.rock8s.com/v1beta1
kind: Plug
metadata:
  name: s3
  labels:
    app.kubernetes.io/name: {{ template "nextcloud.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    bucket: {{ .Values.config.s3.bucket | quote }}
    create: '1'
    preserve: {{ .Values.config.s3.preserve | ternary "1" "0" | quote }}
  resultResources:
    - do: recreate
      stringTemplate: |
        apiVersion: kyverno.io/v1
        kind: Policy
        metadata:
          name: s3-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          background: true
          mutateExistingOnPolicyUpdate: true
          schemaValidation: false
          rules:
            - name: helmrelease
              match:
                resources:
                  kinds:
                    - helm.toolkit.fluxcd.io/*/HelmRelease
                  names:
                    - {{ .Release.Name }}-release
              mutate:
                targets:
                  - apiVersion: helm.toolkit.fluxcd.io/v2beta1
                    kind: HelmRelease
                    name: {{ .Release.Name }}-release
                patchStrategicMerge:
                  spec:
                    values:
                      nextcloud:
                        configs:
                          s3.config.php: |
                            <?php
                            $CONFIG = [
                              'objectstore' => [
                                'class' => '\\OC\\Files\\ObjectStore\\S3',
                                'arguments' => [
                                  'autocreate'     => false,
                                  'bucket'         => '{% .plugConfig.bucket %}',
                                  'endpoint'       => '{% .socketConfig.endpoint %}',
                                  'region'         => '{% .socketConfig.region %}',
                                  'use_ssl'        => {% (eq .socketConfig.tls "1") | ternary "true" "false" %},
                                  {%- if (and .socketConfig.accessKey .socketConfig.secretKey) %}
                                  'key'            => '{% .socketConfig.accessKey %}',
                                  'secret'         => '{% .socketConfig.secretKey %}',
                                  {%- end %}
                                ]
                              ]
                            ];
                      rbac:
                        serviceaccount:
                          annotations:
                            eks.amazonaws.com/role-arn: {% .socketResult.roleArn | quote %}
{{- end }}
