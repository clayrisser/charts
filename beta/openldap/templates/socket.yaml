apiVersion: integration.siliconhills.dev/v1alpha2
kind: Socket
metadata:
  name: ldap
  labels:
    app: {{ template "openldap.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: ldap
    namespace: {{ .Release.Namespace }}
  config:
    bindDN: cn=admin,{{ template "openldap.openldap-dc" . }}
    domain: {{ template "openldap.openldap-dc" . }}
    hostname: {{ template "openldap.openldap-hostname" . }}
    port: {{ .Values.service.openldap.tls.enabled | ternary "636" "389" | quote }}
    protocol: {{ .Values.service.openldap.tls.enabled | ternary "ldaps" "ldap" | quote }}
  configMapper:
    bindPassword: '{% .vars.b64BindPassword | b64dec %}'
  vars:
    - name: b64BindPassword
      fieldref:
        fieldPath: data.LDAP_ADMIN_PASSWORD
      objref:
        apiVersion: v1
        kind: Secret
        name: {{ template "openldap.name" . }}
        namespace: {{ .Release.Namespace }}
  resources:
    - when: [coupled, updated]
      do: recreate
      resource: |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: {{ template "openldap.name" . }}-coupled-or-updated-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            spec:
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: bitnami/kubectl:1.20.9
                  command:
                    - sh
                    - -c
                    - |
                      sleep 10
{{- if .Values.service.openldap.tls.enabled }}
                      kubectl get secret {{ template "openldap.openldap-certificate" . }} \
                        -n {{ .Release.Namespace }} -o yaml | \
                        sed 's|^\(\s*name:\s*{{ template "openldap.openldap-certificate" . }}\)|\1-{% .plug.metadata.name %}|g' \
                        grep -v '^\s*namespace:\s*{{ .Release.Namespace }}' | \
                        kubectl apply -f - --namespace={% .plug.metadata.namespace %}
{{- if (or (not .Values.service.openldap.tls.certificate) .Values.service.openldap.tls.ca) }}
                      kubectl get secret {{ (not .Values.service.openldap.tls.certificate) | ternary "ca" .Values.service.openldap.tls.ca }} \
                        -n {{ .Release.Namespace }} -o yaml | \
                        grep -v '^\s*namespace:\s*{{ .Release.Namespace }}' | \
                        sed 's|^\(\s*name:\s*\){{ (not .Values.service.openldap.tls.certificate) | ternary "ca" .Values.service.openldap.tls.ca }}|\1ca-{% .plug.metadata.name %}|g' | \
                        kubectl apply -f - --namespace={% .plug.metadata.namespace %}
{{- end }}
{{- end }}
                      {%- if (not (eq .plugConfig.replicate "false")) %}
                      cat <<EOF | kubectl apply -f -
                      apiVersion: v1
                      kind: Secret
                      metadata:
                        name: {{ template "openldap.name" . }}-{% .plug.metadata.name %}
                        namespace: '{% .plug.metadata.namespace %}'
                      type: Opaque
                      stringData:
                        bindDN: '{% .socketConfig.bindDN %}'
                        bindPassword: '{% .socketConfig.bindPassword %}'
                        domain: '{% .socketConfig.domain %}'
                        hostname: '{% .socketConfig.hostname %}'
                        port: '{% .socketConfig.port %}'
                        protocol: '{% .socketConfig.protocol %}'
                      EOF
                      {%- end %}
                      kubectl get pods -n {{ .Release.Namespace }} \
                        -l job-name={{ template "openldap.name" . }}-coupled-or-updated-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
    - when: [decoupled]
      do: recreate
      resource: |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: {{ template "openldap.name" . }}-decoupled-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            spec:
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: bitnami/kubectl:1.20.9
                  command:
                    - sh
                    - -c
                    - |
                      kubectl delete secret {{ template "openldap.name" . }}-{% .plug.metadata.name %} \
                        -n {% .plug.metadata.namespace %}
                      kubectl delete secret {{ template "openldap.openldap-certificate" . }}-{% .plug.metadata.name %} \
                        -n {% .plug.metadata.namespace %}
                      kubectl get pods -n {{ .Release.Namespace }} \
                        -l job-name={{ template "openldap.name" . }}-decoupled-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
