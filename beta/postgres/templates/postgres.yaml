apiVersion: pg.percona.com/v1
kind: PerconaPGCluster
metadata:
  name: {{ template "postgres.name" . }}
  labels:
    app.kubernetes.io/name: {{ template "postgres.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    pgo-version: '1.3.0'
spec:
  secretsName: {{ template "postgres.name" . }}-users
  {{- if .Values.service.postgres.tls.enabled }}
  sslCA: {{ template "postgres.postgres-ca" . }}
  sslSecretName: {{ template "postgres.postgres-certificate" . }}
  sslReplicationSecretName: {{ template "postgres.postgres-certificate" . }}
  {{- end }}
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com
    apply: disabled
    schedule: '0 4 * * *'
  database: pgdb
  port: '5432'
  user: pguser
  disableAutofail: false
  tlsOnly: false
  standby: {{ .Values.config.postgres.standby }}
  pause: {{ .Values.config.postgres.pause }}
  keepData: true
  keepBackups: true
#  pgDataSource:
#    restoreFrom: ""
#    restoreOpts: ""
  {{- if .Values.config.wal }}
  walStorage:
    volumeSpec:
      size: {{ .Values.persistence.size.wal | quote }}
      accessmode: {{ .Values.persistence.accessMode | quote }}
      storagetype: dynamic
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageclass: ''
      {{- else }}
      storageclass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
  {{- end }}
  userLabels:
    pgo-version: '1.3.0'
  pgPrimary:
    affinity:
      antiAffinityType: preferred
    image: {{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}
    imagePullPolicy: {{ .Values.config.imagePullPolicy }}
    resources:
{{- if (and .Values.config.postgres.resources.enabled (not (eq .Values.config.postgres.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.postgres.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.postgres.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    tolerations: []
    volumeSpec:
      size: {{ .Values.persistence.size.primary | quote }}
      accessmode: {{ .Values.persistence.accessMode | quote }}
      storagetype: dynamic
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageclass: ''
      {{- else }}
      storageclass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
    expose:
      serviceType: ClusterIP
    customconfig: {{ template "postgres.name" . }}
  pmm:
    enabled: false
    image: {{ .Values.images.pmm.repository }}:{{ .Values.images.pmm.tag }}
    imagePullPolicy: {{ .Values.config.imagePullPolicy | quote }}
    serverHost: monitoring-service
    serverUser: admin
    pmmSecret: cluster1-pmm-secret
    resources:
{{- if (and .Values.config.pmm.resources.enabled (not (eq .Values.config.pmm.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.pmm.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.pmm.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
  backup:
    affinity:
      antiAffinityType: preferred
    backrestRepoImage: {{ .Values.images.backrestRepo.repository }}:{{ .Values.images.backrestRepo.tag }}
    image: {{ .Values.config.backup.enabled | ternary (printf "%s:%s" .Values.images.backup.repository .Values.images.backup.tag) "busybox:latest" }}
    imagePullPolicy: {{ .Values.config.imagePullPolicy | quote }}
    resources:
{{- if (and .Values.config.backup.resources.enabled (not (eq .Values.config.backup.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.backup.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.backup.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      size: {{ .Values.persistence.size.backup | quote }}
      accessmode: {{ .Values.persistence.accessMode | quote }}
      storagetype: dynamic
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageclass: ''
      {{- else }}
      storageclass: {{ .Values.persistence.storageClass | quote }}
      {{- end }}
#    storages:
#      my-gcs:
#        type: gcs
#        bucket: some-gcs-bucket
#    repoPath: ""
    schedule:
      - name: default
        schedule: {{ .Values.config.backup.enabled | ternary .Values.config.backup.schedule "0 0 31 2 *" }}
        keep: {{ .Values.config.backup.keep }}
        type: full
        storage: local
  pgBouncer:
    affinity:
      antiAffinityType: preferred
    image: {{ .Values.images.pgBouncer.repository }}:{{ .Values.images.pgBouncer.tag }}
    imagePullPolicy: {{ .Values.config.imagePullPolicy | quote }}
    size: {{ .Values.config.pgBouncer.replicas }}
    resources:
{{- if (and .Values.config.pgBouncer.resources.enabled (not (eq .Values.config.pgBouncer.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.pgBouncer.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.pgBouncer.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    expose:
      serviceType: ClusterIP
  pgReplicas:
    hotStandby:
      size: {{ .Values.config.postgres.hotReplicas }}
      resources:
{{- if (and .Values.config.postgres.resources.enabled (not (eq .Values.config.postgres.resources.enabled "false"))) }}
        requests:
{{ toYaml .Values.config.postgres.resources.requests | indent 10 }}
        limits:
{{ toYaml .Values.config.postgres.resources.limits | indent 10 }}
{{- else }}
        requests: {}
        limits: {}
{{- end }}
      volumeSpec:
        size: {{ .Values.persistence.size.replicas | quote }}
        accessmode: {{ .Values.persistence.accessMode | quote }}
        storagetype: dynamic
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageclass: ''
        {{- else }}
        storageclass: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
      affinity: {}
      enableSyncStandby: false
      expose:
        serviceType: ClusterIP
  pgBadger:
    enabled: {{ .Values.config.pgBadger.enabled }}
    image: {{ .Values.images.pgBadger.repository }}:{{ .Values.images.pgBadger.tag }}
    imagePullPolicy: {{ .Values.config.imagePullPolicy | quote }}
    port: 10000
