apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "mastodon.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  forceUpgrade: false
  helmVersion: v3
  chart:
    git: https://github.com/nuevesolutions/mastodon.git
    ref: main
    path: chart
  values:
    replicaCount: 1
    image:
      repository: tootsuite/mastodon
      pullPolicy: Always
      tag: v3.3.0
    ingress:
      enabled: {{ .Values.ingress.mastodon.enabled }}
      annotations:
        {{- if (eq .Values.config.clusterType "aks") }}
        kubernetes.io/ingress.class: addon-http-application-routing
        {{- else }}
        kubernetes.io/ingress.class: nginx
        {{- end }}
        {{- if .Values.ingress.mastodon.tls }}
        {{- if (empty .Values.ingress.mastodon.certificate) }}
        cert-manager.io/cluster-issuer: {{ .Values.ingress.mastodon.issuer.name }}
        kubernetes.io/tls-acme: 'true'
        {{- end }}
        nginx.ingress.kubernetes.io/ssl-redirect: 'true'
        {{- end }}
      hostname: {{ .Values.ingress.mastodon.hostname }}
      {{- if .Values.ingress.mastodon.tls }}
      tls:
        - secretName: {{ template "mastodon.mastodon-certificate" . }}
          hosts:
            - {{ .Values.ingress.mastodon.hostname }}
      {{- end }}
    createAdmin:
      enabled: true
      username: {{ .Values.config.admin.username | quote }}
      email: {{ .Values.config.admin.email | quote }}
    locale: en
    cron:
      removeMedia:
        enabled: true
        schedule: "0 0 * * 0"
    application:
      web:
        port: 3000
      streaming:
        port: 4000
        workers: 1
      sidekiq:
        concurrency: 25
    secrets:
      secret_key_base: {{ .Values.config.secret | quote }}
      otp_secret: {{ .Values.config.secret | quote }}
      vapid:
        private_key: {{ .Values.config.privateKey | quote }}
        public_key: {{ .Values.config.publicKey | quote }}
    smtp:
      auth_method: plain
      ca_file:
      delivery_method: smtp
      domain:
      enable_starttls_auto: true
      from_address: notifications@example.com
      login:
      openssl_verify_mode: peer
      password:
      port: 587
      reply_to:
      server: smtp.mailgun.org
      tls: false
    elasticsearch:
      enabled: {{ .Values.config.elasticsearch.enabled }}
      image:
        tag: 6
    postgresql:
      postgresqlDatabase: {{ .Values.config.postgres.database | quote }}
      postgresqlPassword: {{ .Values.config.postgres.password | quote }}
      postgresqlUsername: {{ .Values.config.postgres.username | quote }}
    redis:
      password: {{ .Values.config.redis.password | quote }}
    persistence:
      assets:
        accessMode: {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size.assets | quote }}
      system:
        accessMode: {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size.system | quote }}
    service:
      type: ClusterIP
      port: {{ (eq .Values.service.mastodon.type "LoadBalancer") | ternary .Values.service.mastodon.lbPorts.http  ((and (eq .Values.service.mastodon.type "NodePort") (not (empty .Values.service.mastodon.nodePorts.http))) | ternary .Values.service.mastodon.nodePorts.http "80") }}
    podSecurityContext:
      runAsUser: 991
      runAsGroup: 991
      fsGroup: 991
    securityContext: {}
    serviceAccount:
      create: true
      annotations: {}
      name: ''

    {{- if .Values.persistence.velero.enabled }}
    podAnnotations:
      backup.velero.io/backup-volumes: data
    {{- else }}
    podAnnotations: {}
    {{- end }}
{{- if .Values.config.mastodon.resources.enabled }}
    resources:
{{ toYaml .Values.config.mastodon.resources | indent 6 }}
{{- else }}
    resources: {}
{{- end }}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
