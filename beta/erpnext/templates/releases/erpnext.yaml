apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://helm.erpnext.com
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  chart:
    spec:
      chart: erpnext
      version: {{ .Chart.Version | quote }}
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: erpnext
  values:
    nginx:
      replicaCount: {{ .Values.config.nginx.replicas }}
      image:
        repository: {{ .Values.images.nginx.repository | quote }}
        tag: {{ .Values.images.nginx.tag | quote }}
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      config: |
        {{ .Values.config.nginx.config }}
      environment:
        upstreamRealIPAddress: "127.0.0.1"
        upstreamRealIPRecursive: "off"
        upstreamRealIPHeader: "X-Forwarded-For"
        frappeSiteNameHeader: "$host"
      livenessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      service:
        {{- if .Values.ingress.nginx.enabled }}
        type: ClusterIP
        {{- else }}
        type: {{ .Values.service.nginx.type }}
        {{- end }}
        port: {{ (eq .Values.service.nginx.type "LoadBalancer") | ternary .Values.service.nginx.lbPorts.http  ((and (eq .Values.service.nginx.type "NodePort") (not (empty .Values.service.nginx.nodePorts.http))) | ternary .Values.service.nginx.nodePorts.http "8080") }}
      resources:
{{- if (and .Values.config.nginx.resources.enabled (not (eq .Values.config.nginx.resources.enabled "false"))) }}
        requests:
{{ toYaml .Values.config.nginx.resources.requests | indent 10 }}
        limits:
{{ toYaml .Values.config.nginx.resources.limits | indent 10 }}
{{- else }}
        requests: {}
        limits: {}
{{- end }}
    worker:
      image:
        repository: {{ .Values.images.worker.repository | quote }}
        tag: {{ .Values.images.worker.tag | quote }}
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      gunicorn:
        replicaCount: {{ .Values.config.erpnext.replicas }}
        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        service:
          type: ClusterIP
          port: 8000
        resources:
{{- if (and .Values.config.erpnext.resources.enabled (not (eq .Values.config.erpnext.resources.enabled "false"))) }}
          requests:
{{ toYaml .Values.config.erpnext.resources.requests | indent 12 }}
          limits:
{{ toYaml .Values.config.erpnext.resources.limits | indent 12 }}
{{- else }}
          requests: {}
          limits: {}
{{- end }}
        args:
          - /home/frappe/frappe-bench/env/bin/gunicorn
          - --bind=0.0.0.0:8000
          - --config=/opt/patches/gevent_patch.py
          - --log-file=-
          - --preload
          - --threads=4
          - --timeout=120
          - --worker-class=gevent
          - --worker-tmp-dir=/dev/shm
          - --workers=2
          - frappe.app:application
      default:
        replicaCount: 1
        resources: {}
      short:
        replicaCount: 1
        resources: {}
      long:
        replicaCount: 1
        resources: {}
      scheduler:
        replicaCount: 1
        resources: {}
    socketio:
      replicaCount: 1
      livenessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      image:
        repository: frappe/frappe-socketio
        tag: v14.13.0
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      resources: {}
      service:
        type: ClusterIP
        port: 9000
    persistence:
      worker:
        enabled: {{ .Values.persistence.enabled }}
        size: {{ .Values.persistence.size.worker }}
        storageClass: {{ .Values.persistence.storageClass }}
      logs:
        enabled: {{ (and .Values.config.logs .Values.persistence.enabled) }}
        size: {{ .Values.persistence.size.logs }}
        storageClass: {{ .Values.persistence.storageClass }}
    ingress:
      ingressName: {{ .Release.Name }}-release
      enabled: {{ .Values.ingress.nginx.enabled }}
      annotations:
        {{- if .Values.ingress.nginx.tls }}
        {{- if (not .Values.ingress.nginx.certificate) }}
        kubernetes.io/tls-acme: 'true'
        {{- if .Values.ingress.nginx.issuer.name }}
        cert-manager.io/cluster-issuer: {{ .Values.ingress.nginx.issuer.name }}
        {{- end }}
        {{- end }}
        nginx.ingress.kubernetes.io/ssl-redirect: 'true'
        {{- end }}
      hosts:
        - host: '{{ .Values.ingress.nginx.hostname }}'
          paths:
          - path: /
            pathType: ImplementationSpecific
      {{- if .Values.ingress.nginx.tls }}
      tls:
        - secretName: {{ template "erpnext.erpnext-certificate" . }}
          hosts:
            - '{{ .Values.ingress.nginx.hostname }}'
      {{- end }}
    jobs:
      volumePermissions:
        enabled: false
      configure:
        enabled: true
        fixVolume: false
      createSite:
        enabled: {{ not .Values.config.mysql.internal }}
        forceCreate: false
        siteName: {{ template "erpnext.erpnext-hostname" . }}
        adminPassword: {{ .Values.config.erpnext.adminPassword | quote }}
        installApps:
{{ toYaml (splitList "\n" (.Values.config.erpnext.initialApps | trim)) | indent 10 }}
        dbType: mariadb
      dropSite:
        enabled: false
      backup:
        enabled: {{ (and .Values.config.backup.enabled (not .Values.config.backup.s3.integration)) }}
        siteName: {{ template "erpnext.erpnext-hostname" . }}
        withFiles: true
        push:
          enabled: true
          bucket: {{ .Values.config.backup.s3.bucket | quote }}
          region: {{ .Values.config.backup.s3.region | quote }}
          accessKey: {{ .Values.config.backup.s3.accessKey | quote }}
          secretKey: {{ .Values.config.backup.s3.secretKey | quote }}
          endpoint: https://{{ (empty .Values.config.backup.s3.endpoint) | ternary (printf "s3.%s.amazonaws.com" .Values.config.backup.s3.region) .Values.config.backup.s3.endpoint }}/{{ .Values.config.backup.s3.prefix }}
      migrate:
        enabled: false
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    serviceAccount:
      create: true
    podSecurityContext:
      supplementalGroups: [1000]
    securityContext:
      capabilities:
        add:
        - CAP_CHOWN
    redis-cache:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-queue:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-socketio:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    mariadb:
      enabled: true
      image:
        registry: docker.io
        repository: {{ .Values.images.mariadb.repository | quote }}
        tag: {{ .Values.images.mariadb.tag | quote }}
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      auth:
        rootPassword: {{ .Values.config.mysql.password | quote }}
        username: 'erpnext'
        password: {{ .Values.config.mysql.password | quote }}
        replicationPassword: {{ .Values.config.mysql.password | quote }}
      primary:
        service:
          ports:
            mysql: 3306
        configuration: |-
          [mysqld]
          skip-name-resolve
          explicit_defaults_for_timestamp
          basedir=/opt/bitnami/mariadb
          plugin_dir=/opt/bitnami/mariadb/plugin
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          tmpdir=/opt/bitnami/mariadb/tmp
          max_allowed_packet=16M
          # bind-address=::
          pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
          log-error=/opt/bitnami/mariadb/logs/mysqld.log
          # Frappe Specific Changes
          character-set-client-handshake=FALSE
          character-set-server=utf8mb4
          collation-server=utf8mb4_unicode_ci
          [client]
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          plugin_dir=/opt/bitnami/mariadb/plugin
          # Frappe Specific Changes
          default-character-set=utf8mb4
          [manager]
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    postgresql:
      enabled: false
{{- if (or (not .Values.config.mysql.integration) (not .Values.config.mysql.internal)) }}
    dbHost: {{ .Values.config.mysql.host | quote }}
    dbPort: {{ .Values.config.mysql.port | quote }}
    dbRootPassword: {{ .Values.config.mysql.password | quote }}
    dbRootUser: {{ .Values.config.mysql.username | quote }}
    mariadbHost: {{ .Values.config.mysql.host | quote }}
{{- end }}
