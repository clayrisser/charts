apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://helm.erpnext.com
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  chart:
    spec:
      chart: erpnext
      version: {{ .Release.Version | quote }}
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: erpnext
  values:
    nginx:
      replicaCount: 1
      image:
        repository: {{ .Values.images.nginx.repository | quote }}
        tag: {{ .Values.images.nginx.tag | quote }}
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      config: |
        {{ .Values.config.nginx.config }}
      environment:
        upstreamRealIPAddress: "127.0.0.1"
        upstreamRealIPRecursive: "off"
        upstreamRealIPHeader: "X-Forwarded-For"
        frappeSiteNameHeader: "$host"
      livenessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      service:
        type: ClusterIP
        port: 8080
        # port: {{ (eq .Values.service.erpnext.type "LoadBalancer") | ternary .Values.service.erpnext.lbPorts.http  ((and (eq .Values.service.erpnext.type "NodePort") (not (empty .Values.service.erpnext.nodePorts.http))) | ternary .Values.service.erpnext.nodePorts.http "80") }}
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      envVars: []
      initContainers: []
      sidecars: []
    worker:
      image:
        repository: {{ .Values.images.worker.repository | quote }}
        tag: {{ .Values.images.worker.tag | quote }}
        pullPolicy: {{ .Values.config.imagePullPolicy | quote }}
      gunicorn:
        replicaCount: 1
        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        service:
          type: ClusterIP
          port: 8000
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
        args:
          - /home/frappe/frappe-bench/env/bin/gunicorn
          - --bind=0.0.0.0:8000
          - --config=/opt/patches/gevent_patch.py
          - --log-file=-
          - --preload
          - --threads=4
          - --timeout=120
          - --worker-class=gevent
          - --worker-tmp-dir=/dev/shm
          - --workers=2
          - frappe.app:application
        envVars: []
        initContainers: []
        sidecars: []
      default:
        replicaCount: 1
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
        livenessProbe:
          override: false
          probe: {}
        readinessProbe:
          override: false
          probe: {}
        envVars: []
        initContainers: []
        sidecars: []
      short:
        replicaCount: 1
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
        livenessProbe:
          override: false
          probe: {}
        readinessProbe:
          override: false
          probe: {}
        envVars: []
        initContainers: []
        sidecars: []
      long:
        replicaCount: 1
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
        livenessProbe:
          override: false
          probe: {}
        readinessProbe:
          override: false
          probe: {}
        envVars: []
        initContainers: []
        sidecars: []
      scheduler:
        replicaCount: 1
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
        livenessProbe:
          override: false
          probe: {}
        readinessProbe:
          override: false
          probe: {}
        envVars: []
        initContainers: []
        sidecars: []
    socketio:
      replicaCount: 1
      livenessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      image:
        repository: frappe/frappe-socketio
        tag: v14.13.0
        pullPolicy: IfNotPresent
      resources: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
      service:
        type: ClusterIP
        port: 9000
      envVars: []
      initContainers: []
      sidecars: []
    persistence:
      worker:
        enabled: {{ .Values.persistence.enabled }}
        size: {{ .Values.persistence.size.worker }}
        storageClass: {{ .Values.persistence.storageClass }}
      logs:
        enabled: {{ .Values.persistence.enabled }}
        size: {{ .Values.persistence.size.logs }}
        storageClass: {{ .Values.persistence.storageClass }}
    ingress:
      # ingressName: ""
      # className: ""
      enabled: false
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"
        # cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
      - host: erp.cluster.local
        paths:
        - path: /
          pathType: ImplementationSpecific
      tls: []
      #  - secretName: auth-server-tls
      #    hosts:
      #      - auth-server.local
    jobs:
      volumePermissions:
        enabled: false
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
      configure:
        enabled: true
        fixVolume: false
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
      createSite:
        enabled: true
        forceCreate: true
        siteName: "erp.cluster.local"
        adminPassword: "changeit"
        installApps:
          - erpnext
        dbType: mariadb
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
      dropSite:
        enabled: false
        forced: false
        siteName: "erp.cluster.local"
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
      backup:
        enabled: false
        siteName: "erp.cluster.local"
        withFiles: true
        push:
          enabled: false
          # bucket: "erpnext"
          # region: "us-east-1"
          # accessKey: "ACCESSKEY"
          # secretKey: "SECRETKEY"
          # endpoint: http://store.storage.svc.cluster.local
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
      migrate:
        enabled: false
        siteName: "erp.cluster.local"
        backoffLimit: 0
        resources: {}
        nodeSelector: {}
        tolerations: []
        affinity: {}
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    serviceAccount:
      create: true
    podSecurityContext:
      supplementalGroups: [1000]
      # runAsUser: 991
      # runAsGroup: 991
      # fsGroup: 991
    securityContext:
      capabilities:
        add:
        - CAP_CHOWN
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    redis-cache:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-queue:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-socketio:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false

  mariadb:
    # https://github.com/bitnami/charts/tree/master/bitnami/mariadb
    enabled: true
    auth:
      rootPassword: "changeit"
      username: "erpnext"
      password: "changeit"
      replicationPassword: "changeit"
    primary:
      service:
        ports:
          mysql: 3306
      configuration: |-
        [mysqld]
        skip-name-resolve
        explicit_defaults_for_timestamp
        basedir=/opt/bitnami/mariadb
        plugin_dir=/opt/bitnami/mariadb/plugin
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        tmpdir=/opt/bitnami/mariadb/tmp
        max_allowed_packet=16M
        bind-address=::
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
        log-error=/opt/bitnami/mariadb/logs/mysqld.log
        # Frappe Specific Changes
        character-set-client-handshake=FALSE
        character-set-server=utf8mb4
        collation-server=utf8mb4_unicode_ci
        [client]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        plugin_dir=/opt/bitnami/mariadb/plugin
        # Frappe Specific Changes
        default-character-set=utf8mb4
        [manager]
        port=3306
        socket=/opt/bitnami/mariadb/tmp/mysql.sock
        pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid

    postgresql:
      enabled: false
{{- if (not .Values.config.mysql.integration) }}
    dbHost: {{ .Values.config.mysql.host | quote }}
    dbPort: {{ .Values.config.mysql.port | quote }}
    dbRootPassword: {{ .Values.config.mysql.password | quote }}
    dbRootUser: {{ .Values.config.mysql.username | quote }}
    mariadbHost: {{ .Values.config.mysql.host | quote }}
{{- end }}
