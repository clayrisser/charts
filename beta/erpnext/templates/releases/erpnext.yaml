apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  url: https://helm.erpnext.com
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }}-release
  labels:
    app.kubernetes.io/name: {{ template "erpnext.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  interval: 5m
  chart:
    spec:
      chart: erpnext
      version: {{ .Release.Version | quote }}
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: erpnext
  values:
    replicaCount: 1
    pythonImage:
      repository: frappe/erpnext-worker
      tag: v12.18.0
      pullPolicy: IfNotPresent
    socketIOImage:
      repository: frappe/frappe-socketio
      tag: v12.15.0
      pullPolicy: IfNotPresent
    frappePyPort: "8000"
    socketIOPort: "9000"
    # postgresHost: {{ .Values.config.mysql.host }}
    # postgresPort: {{ .Values.config.mysql.port }}
    serviceAccount:
      create: true
    service:
      type: ClusterIP
      port: {{ (eq .Values.service.erpnext.type "LoadBalancer") | ternary .Values.service.erpnext.lbPorts.http  ((and (eq .Values.service.erpnext.type "NodePort") (not (empty .Values.service.erpnext.nodePorts.http))) | ternary .Values.service.erpnext.nodePorts.http "80") }}
    persistence:
      worker:
        enabled: {{ .Values.persistence.enabled }}
        size: {{ .Values.persistence.size.system }}
        storageClass: {{ .Values.persistence.storageClass }}
      logs:
        enabled: {{ .Values.persistence.enabled }}
        size: {{ .Values.persistence.size.system }}
        storageClass: {{ .Values.persistence.storageClass }}
    podSecurityContext:
      runAsUser: 991
      runAsGroup: 991
      fsGroup: 991
    securityContext: {}
    serviceAccount:
      create: true
      annotations: {}
      name: ''
    podAnnotations: {}
    resources: {}
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
      # podAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - topologyKey: kubernetes.io/hostname
      #       labelSelector:
      #         matchExpressions:
      #           - key: app.kubernetes.io/instance
      #             operator: In
      #             values:
      #               - {{ template "erpnext.fullname" . }}-backend

