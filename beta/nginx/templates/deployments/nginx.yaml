apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nginx.fullname" . }}-nginx
  labels:
    app: {{ template "nginx.name" . }}-nginx
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "nginx.name" . }}-nginx
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "nginx.name" . }}-nginx
        release: {{ .Release.Name }}
      {{- if .Values.persistence.velero.enabled }}
      annotations:
        backup.velero.io/backup-volumes: data
      {{- end }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.persistence.enabled | ternary "91" "89" }}
              preference:
                matchExpressions:
                  - key: application/state
                    operator: In
                    values:
                      - {{ .Values.persistence.enabled | ternary "stateful" "stateless" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 90
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ template "nginx.name" . }}-nginx
      containers:
        - name: {{ template "nginx.fullname" . }}-nginx
          image: {{ .Values.images.nginx.repository }}:{{ .Values.images.nginx.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          resources:
            requests:
              cpu: {{ .Values.config.nginx.resources.requests.cpu }}
              memory: {{ .Values.config.nginx.resources.requests.memory }}
            limits:
              cpu: {{ .Values.config.nginx.resources.limits.cpu }}
              memory: {{ .Values.config.nginx.resources.limits.memory }}
          ports:
            - name: container
              containerPort: 80
          volumeMounts:
            - name: data
              mountPath: /_data
            - name: data
              mountPath: '/data'
              subPath: data
          env: []
          livenessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            httpGet:
              path: /
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim.nginx | default (printf "%s-nginx" (include "nginx.fullname" . )) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
