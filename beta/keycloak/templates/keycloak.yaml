{{- $postgres := .Values.config.postgres }}
apiVersion: k8s.keycloak.org/v2alpha1
kind: Keycloak
metadata:
  name: {{ template "keycloak.name" . }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ template "keycloak.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  instances: {{ .Values.config.keycloak.replicas }}
  image: {{ .Values.images.keycloak.repository }}:{{ .Values.images.keycloak.tag }}
  imagePullSecrets:
    - name: registry
  hostname:
    hostname: {{ template "keycloak.keycloak-hostname" . }}
  db:
    vendor: postgres
    database: {{ $postgres.database | quote }}
    host: {{ $postgres.host | quote }}
    port: {{ $postgres.port }}
    usernameSecret:
      name: {{ template "keycloak.name" . }}-db-secret
      key: POSTGRES_USERNAME
    passwordSecret:
      name: {{ template "keycloak.name" . }}-db-secret
      key: POSTGRES_PASSWORD
  features:
    disabled: []
    enabled: []
  ingress:
    enabled: false
  unsupported:
    podTemplate:
      spec:
        containers:
          - command:
              - sh
              - -c
              - |
                  mkdir -p /opt/keycloak/certs
                  for CERT in /opt/keycloak/certs/*.crt; do
                    if [ -f "$CERT" ] && [ "$(cat $CERT)" != "" ]; then
                      ALIAS=$(keytool -printcert -file "$CERT" | grep -E '^Owner: CN=' | head -n1 | sed 's|Owner: CN=||g')
                      echo keytool -import -trustcacerts -file "$CERT" -cacerts -alias "$ALIAS" -storepass "$KC_SPI_TRUSTSTORE_FILE_PASSWORD" -noprompt
                      keytool -import -trustcacerts -file "$CERT" -cacerts -alias "$ALIAS" -storepass "$KC_SPI_TRUSTSTORE_FILE_PASSWORD" -noprompt
                    fi
                  done
                  exec /opt/keycloak/bin/kc.sh start
            env:
              - name: KC_SPI_TRUSTSTORE_FILE_FILE
                value: /etc/alternatives/jre/lib/security/cacerts
              - name: KC_SPI_TRUSTSTORE_FILE_PASSWORD
                value: changeit
              - name: KC_SPI_TRUSTSTORE_FILE_HOSTNAME_VERIFICATION_POLICY
                value: ANY
              - name: KC_VAULT
                value: file
              - name: KC_VAULT_DIR
                value: /opt/keycloak/secrets
              - name: KC_LOG_LEVEL
                value: {{ .Values.config.debug | ternary "ALL" "INFO" | quote }}
              - name: KC_HOSTNAME_STRICT
                value: 'false'
              - name: KC_HOSTNAME_STRICT_BACKCHANNEL
                value: 'false'
              - name: KC_HTTP_ENABLED
                value: {{ (and .Values.ingress.keycloak.enabled .Values.ingress.keycloak.tls) | ternary "true" "false" | quote }}
            envFrom:
              - secretRef:
                  name: keycloak-vault
            volumeMounts:
              - name: keycloak-vault
                mountPath: /opt/keycloak/secrets
                readOnly: true
              {{- if .Values.config.ldap.enabled }}
              - name: ldap-cert
                mountPath: /opt/keycloak/certs
                readOnly: true
              {{- end }}
{{- if (and .Values.config.keycloak.resources.enabled (not (eq .Values.config.keycloak.resources.enabled "false"))) }}
            resources:
              requests:
{{ toYaml .Values.config.keycloak.resources.requests | indent 16 }}
              limits:
{{ toYaml .Values.config.keycloak.resources.limits | indent 16 }}
{{- end }}
        volumes:
          - name: keycloak-vault
            secret:
              secretName: {{ template "keycloak.name" . }}-vault
          {{- if .Values.config.ldap.enabled }}
          - name: ldap-cert
            secret:
              secretName: {{ .Values.config.ldap.tls.certificate | default "ldap-cert" }}
          {{- end }}
