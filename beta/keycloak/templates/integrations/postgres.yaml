{{- if .Values.config.postgres.integration }}
{{- $name := (split "." .Values.config.postgres.integration)._1 | default "postgres" }}
{{- $namespace := (split "." (printf "%s." .Values.config.postgres.integration))._0 }}
{{- $existingKeycloak := lookup "keycloak.org/v1alpha1" "Keycloak" .Release.Namespace (include "keycloak.name" .) }}
{{- $patchKeycloak := true }}
{{- if $existingKeycloak }}
{{- if $existingKeycloak.spec.externalDatabase.enabled }}
{{- $patchKeycloak = false }}
{{- end }}
{{- end }}
apiVersion: integration.risserlabs.com/v1alpha2
kind: Plug
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: {{ template "keycloak.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interfaceVersions: '*'
  interface:
    name: postgres
    namespace: {{ $namespace }}
  socket:
    name: {{ $name }}
    namespace: {{ $namespace }}
  config:
    database: {{ .Values.config.postgres.database | quote }}
    createdb: 'true'
    cleanup: 'false'
    replicate: 'false'
  resources:
    - when: [coupled, updated]
      do: apply
      resource: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: keycloak-db-secret
            namespace: {{ .Release.Namespace }}
            labels:
              app: {{ template "keycloak.name" . }}
              helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
              app.kubernetes.io/instance: {{ .Release.Name }}
              app.kubernetes.io/managed-by: {{ .Release.Service }}
          stringData:
            POSTGRES_DATABASE: '{% .plugConfig.database %}'
            POSTGRES_EXTERNAL_ADDRESS: '{% .socketConfig.hostname %}'
            POSTGRES_EXTERNAL_PORT: '{% .socketConfig.port %}'
            POSTGRES_PASSWORD: '{% .socketConfig.password %}'
            POSTGRES_SUPERUSER: 'true'
            POSTGRES_USERNAME: '{% .socketConfig.username %}'
{{- if $patchKeycloak }}
    - when: [coupled, updated]
      do: recreate
      resource: |
        apiVersion: patch.risserlabs.com/v1alpha1
        kind: Patch
        metadata:
          name: postgres-coupled-or-updated
          namespace: {{ .Release.Namespace }}
        spec:
          patches:
            - id: keycloak
              target:
                group: keycloak.org
                version: v1alpha1
                kind: Keycloak
                name: {{ template "keycloak.name" . }}
              waitForTimeout: 5
              waitForResource: true
              type: json
              patch: |-
                - op: replace
                  path: /spec/externalDatabase/enabled
                  value: true
{{- end }}
{{- end }}
