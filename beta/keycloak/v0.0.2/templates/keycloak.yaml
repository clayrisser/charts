apiVersion: keycloak.org/v1alpha1
kind: Keycloak
metadata:
  name: {{ template "keycloak.fullname" . }}
  labels:
    app: {{ template "keycloak.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  instances: 1
  extensions: []
  externalAccess:
    enabled: true
    host: {{ template "keycloak.keycloak-hostname" . }}
    tlsTermination: reencrypt
  external:
    enabled: false
  # externalDatabase is set from kustomization
  # externalDatabase:
  #   enabled: true
  keycloakDeploymentSpec:
    experimental:
      command:
        - sh
        - -c
        - |
            {{- if (and .Values.config.keycloak.ldap.enabled .Values.config.keycloak.ldap.tls) }}
            if [ "$LDAP_TLS_CRT" != "" ]; then
              mkdir -p /opt/jboss/certs
              echo "-----BEGIN CERTIFICATE-----" > /opt/jboss/certs/ldap-ca.crt
              echo $LDAP_TLS_CRT | sed 's/ \?-\{5\}[A-Z]\+ [A-Z]\+-\{5\} \?//g' | sed 's/ /\n/g' >> /opt/jboss/certs/ldap-ca.crt
              echo "-----END CERTIFICATE-----" >> /opt/jboss/certs/ldap-ca.crt
              echo >> /opt/jboss/certs/ldap-ca.crt
            fi
            {{- end }}
            # TODO: support custom themes
            # {{- if (not (empty .Values.config.keycloak.themeZip)) }}
            # export CWD=$(pwd)
            # mkdir -p /opt/jboss/keycloak/injected-themes
            # cd /opt/jboss/keycloak/injected-themes
            # wget -qO- {{ .Values.config.keycloak.themeZip }} | unzip -
            # cp -r /opt/jboss/keycloak/injected-themes/* /opt/jboss/keycloak/themes 2>/dev/null | true
            # cd $CWD
            # {{- end }}
            exec /opt/jboss/tools/docker-entrypoint.sh
      env:
        - name: PROXY_ADDRESS_FORWARDING
          value: 'true'
        {{- if .Values.config.debug }}
        - name: KEYCLOAK_LOGLEVEL
          value: ALL
        - name: ROOT_LOGLEVEL
          value: ALL
        {{- end }}
        - name: KEYCLOAK_HOSTNAME
          value: {{ template "keycloak.keycloak-hostname" . }}
        - name: KEYCLOAK_DEFAULT_THEME
          value: {{ .Values.config.keycloak.defaultTheme | quote }}
        - name: KEYCLOAK_WELCOME_THEME
          value: {{ .Values.config.keycloak.welcomeTheme | quote }}
        {{- if (and .Values.config.keycloak.ldap.enabled .Values.config.keycloak.ldap.tls) }}
        - name: X509_CA_BUNDLE
          value: '/var/run/secrets/kubernetes.io/serviceaccount/*.crt /opt/jboss/certs/ldap-ca.crt'
        - name: LDAP_TLS_CRT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.config.keycloak.ldap.tls.ca.secret | quote }}
              key: {{ .Values.config.keycloak.ldap.tls.ca.key | quote }}
        {{- end }}
{{- if (and .Values.config.keycloak.resources.enabled (not (eq .Values.config.keycloak.resources.enabled "false"))) }}
    resources:
      requests:
{{ toYaml .Values.config.keycloak.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.keycloak.resources.limits | indent 8 }}
{{- end }}
  migration:
    backups:
      enabled: false
      strategy: IGNORE_EXISTING
  podDisruptionBudget:
    enabled: false
  unmanaged: false
---
apiVersion: keycloak.org/v1alpha1
kind: KeycloakRealm
metadata:
  name: {{ template "keycloak.fullname" . }}
  labels:
    app: {{ template "keycloak.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  realm:
    id: main
    realm: main
    enabled: true
    displayName: 'Main Realm'
    {{- if .Values.config.keycloak.ldap.enabled }}
    userFederationProviders:
      - displayName: ldap
        providerName: ldap
        config:
          allowKerberosAuthentication: 'false'
          authType: simple
          batchSizeForSync: '1000'
          bindCredential: {{ .Values.config.keycloak.ldap.password | quote }}
          bindDn: cn={{ .Values.config.keycloak.ldap.username }},{{ template "keycloak.ldap-dc" . }}
          cachePolicy: DEFAULT
          changedSyncPeriod: '-1'
          connectionPooling: 'true'
          connectionUrl: ldap{{ .Values.config.keycloak.ldap.tls.enabled | ternary "s" "" }}://{{ .Values.config.keycloak.ldap.hostname }}
          debug: 'false'
          editMode: WRITABLE
          enabled: 'true'
          fullSyncPeriod: '-1'
          importEnabled: 'false'
          pagination: 'true'
          priority: '0'
          rdnLDAPAttribute: uid
          searchScope: '1'
          searchScope: '1'
          startTls: 'false'
          syncRegistrations: 'true'
          trustEmail: 'true'
          useKerberosForPasswordAuthentication: 'false'
          useTruststoreSpi: ldapsOnly
          userObjectClasses: {{ .Values.config.keycloak.ldap.userObjectClasses | quote }}
          usernameLDAPAttribute: uid
          usersDn: ou=people,{{ template "keycloak.ldap-dc" . }}
          uuidLDAPAttribute: entryUUID
          validatePasswordPolicy: 'false'
          vendor: 'rhds'
    userFederationMappers:
      - name: username
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'false'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'true'
          ldap.attribute: uid
          read.only: 'false'
          user.model.attribute: username
      - name: email
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'false'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'true'
          ldap.attribute: mail
          read.only: 'false'
          user.model.attribute: email
      - name: 'first name'
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'true'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'true'
          ldap.attribute: cn
          read.only: 'false'
          user.model.attribute: firstName
      - name: 'last name'
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'true'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'true'
          ldap.attribute: sn
          read.only: 'false'
          user.model.attribute: lastName
      - name: 'creation date'
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'true'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'false'
          ldap.attribute: createTimestamp
          read.only: 'true'
          user.model.attribute: createTimestamp
      - name: 'modify date'
        federationProviderDisplayName: ldap
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: 'true'
          is.binary.attribute: 'false'
          is.mandatory.in.ldap: 'false'
          ldap.attribute: modifyTimestamp
          read.only: 'true'
          user.model.attribute: modifyTimestamp
    {{- end }}
  instanceSelector:
    matchLabels:
      app: {{ template "keycloak.fullname" . }}
