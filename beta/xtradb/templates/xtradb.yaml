apiVersion: pxc.percona.com/v1
kind: PerconaXtraDBCluster
metadata:
  name: {{ template "xtradb.name" . }}
  labels:
    app.kubernetes.io/name: {{ template "xtradb.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  crVersion: 1.10.0
  secretsName: {{ include "xtradb.name" . }}
  {{- if .Values.service.xtradb.tls.enabled }}
  sslSecretName: {{ .Values.service.xtradb.tls.certificate | default (include "xtradb.name" .) }}
  sslInternalSecretName: {{ .Values.service.xtradb.tls.certificate | default (include "xtradb.name" .) }}
  {{- end }}
  allowUnsafeConfigurations: true
  pause: {{ .Values.config.xtradb.pause }}
  updateStrategy: {{ .Values.config.updateStrategy }}
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com/versions
    apply: {{ .Values.config.xtradb.upgrade.apply }}
    schedule: {{ .Values.config.xtradb.upgrade.schedule }}
  pxc:
    size: {{ .Values.config.xtradb.size }}
    image: '{{ .Values.images.xtradb.repository }}:{{ .Values.images.xtradb.tag }}'
    readinessDelaySec: 15
    livenessDelaySec: 300
{{- if .Values.config.xtradb.mysqlConfig }}
    configuration: |
{{ .Values.config.xtradb.mysqlConfig | nindent 6 }}
{{- end }}
    {{- if .Values.persistence.velero.enabled }}
    annotations:
      backup.velero.io/backup-volumes: datadir
    {{- end }}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if (and .Values.config.xtradb.resources.enabled (not (eq .Values.config.xtradb.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.xtradb.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.xtradb.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      {{- if not .Values.persistence.enabled }}
      emptyDir: {}
      {{- else }}
      persistentVolumeClaim:
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        {{- end }}
        accessModes: [{{ .Values.persistence.accessMode | quote }}]
        resources:
          requests:
            storage: {{ .Values.persistence.size.xtradb | quote }}
      {{- end }}
  haproxy:
    enabled: {{ .Values.config.haproxy.enabled }}
    size: {{ .Values.config.haproxy.size }}
    image: '{{ .Values.images.haproxy.repository }}:{{ .Values.images.haproxy.tag }}'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if (and .Values.config.haproxy.resources.enabled (not (eq .Values.config.haproxy.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.haproxy.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.haproxy.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      emptyDir: {}
  logcollector:
    enabled: {{ .Values.config.logcollector.enabled }}
    image: '{{ .Values.images.logcollector.repository }}:{{ .Values.images.logcollector.tag }}'
  proxysql:
    enabled: {{ .Values.config.proxysql.enabled }}
    size: {{ .Values.config.proxysql.size }}
    image: '{{ .Values.images.proxysql.repository }}:{{ .Values.images.proxysql.tag }}'
    annotations: {}
    labels: {}
    nodeSelector: {}
    affinity: {}
    tolerations: []
    gracePeriod: 600
    podDisruptionBudget:
      maxUnavailable: 1
    resources:
{{- if (and .Values.config.proxysql.resources.enabled (not (eq .Values.config.proxysql.resources.enabled "false"))) }}
      requests:
{{ toYaml .Values.config.proxysql.resources.requests | indent 8 }}
      limits:
{{ toYaml .Values.config.proxysql.resources.limits | indent 8 }}
{{- else }}
      requests: {}
      limits: {}
{{- end }}
    volumeSpec:
      emptyDir: {}
  pmm:
    enabled: {{ .Values.config.pmm.enabled }}
    image: '{{ .Values.images.pmm.repository }}:{{ .Values.images.pmm.tag }}'
    serverHost: {{ .Values.config.pmm.hostname | quote }}
    serverUser: {{ .Values.config.pmm.username | quote }}
  backup:
    enabled: false
