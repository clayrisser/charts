apiVersion: integration.rock8s.com/v1beta1
kind: Socket
metadata:
  name: mysql
  labels:
    app.kubernetes.io/name: {{ template "xtradb.name" . }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  epoch: {{ now | unixEpoch | quote }}
  interface:
    config:
      plug:
        database:
          required: true
        cleanup: {}
        create: {}
      socket:
        protocol:
          required: true
        username:
          required: true
        password:
          required: true
        hostname:
          required: true
        port:
          required: true
  config:
    protocol: mysql
    username: root
    hostname: {{ template "xtradb.xtradb-hostname" . }}
    port: '3306'
  configSecretName: {{ template "xtradb.name" . }}-{{ .Values.config.username }}-secret
  resources:
    - when: [coupled, updated]
      do: recreate
      template:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: {{ template "xtradb.name" . }}-coupled-or-updated-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            metadata:
              annotations:
                sidecar.istio.io/inject: 'false'
            spec:
              automountServiceAccountToken: true
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: registry.gitlab.com/bitspur/rock8s/images/kube-commands-mysql:3.18
                  imagePullPolicy: Always
                  env:
                    - name: MYSQL_PROTOCOL
                      value: '{% .socketConfig.protocol %}'
                    - name: MYSQL_USERNAME
                      value: '{% .socketConfig.username %}'
                    - name: MYSQL_HOSTNAME
                      value: '{% .socketConfig.hostname %}'
                    - name: MYSQL_PORT
                      value: '{% .socketConfig.port %}'
                    - name: MYSQL_DATABASE
                      value: '{% .plugConfig.database %}'
                    - name: MYSQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: {{ template "xtradb.name" . }}-{{ .Values.config.username }}-secret
                          key: password
                  command:
                    - sh
                    - -c
                    - |
                      if [ "{% .plugConfig.create %}" != "0" ]; then
                        echo "Creating database if not exists"
                        mysql -h $MYSQL_HOSTNAME -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -P $MYSQL_PORT -e "CREATE DATABASE IF NOT EXISTS $MYSQL_DATABASE;"
                        echo "STATUS_MESSAGE: Database $MYSQL_DATABASE checked/created"
                      fi
                      kubectl get pods -n {{ .Release.Namespace }} \
                        -l job-name={{ template "xtradb.name" . }}-coupled-or-updated-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
    - when: [decoupled]
      do: recreate
      template:
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: {{ template "xtradb.name" . }}-decoupled-{% .plug.metadata.namespace %}
        spec:
          activeDeadlineSeconds: 360
          backoffLimit: 6
          ttlSecondsAfterFinished: 360
          template:
            metadata:
              annotations:
                sidecar.istio.io/inject: 'false'
            spec:
              automountServiceAccountToken: true
              restartPolicy: Never
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                      - matchExpressions:
                          - key: kubernetes.io/arch
                            operator: In
                            values:
                              - amd64
              containers:
                - name: kubectl
                  image: registry.gitlab.com/bitspur/rock8s/images/kube-commands-mysql:3.18
                  imagePullPolicy: Always
                  env:
                    - name: MYSQL_PROTOCOL
                      value: '{% .socketConfig.protocol %}'
                    - name: MYSQL_USERNAME
                      value: '{% .socketConfig.username %}'
                    - name: MYSQL_HOSTNAME
                      value: '{% .socketConfig.hostname %}'
                    - name: MYSQL_PORT
                      value: '{% .socketConfig.port %}'
                    - name: MYSQL_DATABASE
                      value: '{% .plugConfig.database %}'
                    - name: MYSQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: {{ template "xtradb.name" . }}-{{ .Values.config.username }}-secret
                          key: password
                  command:
                    - sh
                    - -c
                    - |
                      {%- if (and (not (eq .plugConfig.create "0")) (eq .plugConfig.cleanup "true")) %}
                      echo "Dropping database if exists"
                      mysql -h $MYSQL_HOSTNAME -u $MYSQL_USERNAME -p$MYSQL_PASSWORD -P $MYSQL_PORT -e "DROP DATABASE IF EXISTS $MYSQL_DATABASE;"
                      echo "STATUS_MESSAGE: Database $MYSQL_DATABASE dropped if existed"
                      {%- end %}
                      kubectl get pods -n {{ .Release.Namespace }} \
                        -l job-name={{ template "xtradb.name" . }}-decoupled-{% .plug.metadata.namespace %} \
                        --field-selector status.phase=Failed \
                        -o yaml | kubectl delete -f -
