{{- if .Values.config.phpmyadmin.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpmyadmin
  labels:
    app.kubernetes.io/name: phpmyadmin
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: phpmyadmin
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: {{ (eq .Values.config.updateStrategy "SmartUpdate") | ternary "RollingUpdate" .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: phpmyadmin
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 89
              preference:
                matchExpressions:
                  - key: application/state
                    operator: In
                    values:
                      - stateless
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 90
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - phpmyadmin
      containers:
        - name: phpmyadmin
          image: {{ .Values.images.phpmyadmin.repository }}:{{ .Values.images.phpmyadmin.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
          resources:
{{- if (and .Values.config.phpmyadmin.resources.enabled (not (eq .Values.config.phpmyadmin.resources.enabled "false"))) }}
            requests:
{{ toYaml .Values.config.phpmyadmin.resources.requests | indent 14 }}
            limits:
{{ toYaml .Values.config.phpmyadmin.resources.limits | indent 14 }}
{{- else }}
            requests: {}
            limits: {}
{{- end }}
          ports:
            - name: container
              containerPort: 80
          {{- if .Values.service.xtradb.tls.enabled }}
          volumeMounts:
            - name: tls
              mountPath: /tmp/certs
              readOnly: true
            - name: ca
              mountPath: /tmp/ca
              readOnly: true
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - |
                    mkdir -p /container/service/mariadb-client/assets/certs
                    [ -f /tmp/ca/tls.crt ] && cat /tmp/ca/ca.crt > /container/service/mariadb-client/assets/certs/ca.crt || true
                    [ -f /tmp/certs/ca.crt ] && cat /tmp/certs/ca.crt > /container/service/mariadb-client/assets/certs/ca.crt || true
                    cat /tmp/certs/tls.crt > /container/service/mariadb-client/assets/certs/tls.crt
                    cat /tmp/certs/tls.key > /container/service/mariadb-client/assets/certs/tls.key
          {{- end }}
          env:
            - name: PHPMYADMIN_DB_HOSTS
              valueFrom:
                secretKeyRef:
                  name: phpmyadmin
                  key: db_hosts
            - name: PHPMYADMIN_TRUST_PROXY_SSL
              value: 'true'
            - name: PHPMYADMIN_HTTPS
              value: 'false'
            {{- if .Values.service.xtradb.tls.enabled }}
            - name: DATABASE_SSL_HELPER_TOOL
              value: 'true'
            - name: DATABASE_SSL_HELPER_AUTO_RENEW
              value: 'false'
            {{- end }}
          livenessProbe:
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
            httpGet:
              path: /
              port: container
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
            httpGet:
              path: /
              port: container
      {{- if .Values.service.xtradb.tls.enabled }}
      volumes:
        - name: tls
          secret:
            secretName: {{ .Values.service.xtradb.tls.certificate | default (include "xtradb.name" .) }}
      {{- if (not .Values.service.openldap.tls.certificate) }}
        - name: ca
          secret:
            secretName: ca
      {{- end }}
      {{- end }}
{{- end }}
